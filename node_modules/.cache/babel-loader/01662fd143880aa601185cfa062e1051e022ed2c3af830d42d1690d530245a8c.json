{"ast":null,"code":"var _jsxFileName = \"/Users/hongdakyung/Desktop/myWorkSpace/comAround-supabase-customHook/src/pages/CompanyPage.tsx\",\n  _s = $RefreshSig$();\nimport { useLocation } from \"react-router-dom\";\nimport { getTable } from \"../hooks/useGetData\";\nimport { useQuery } from \"react-query\";\nimport countALL from \"../util/countALL\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompanyPage = () => {\n  _s();\n  const location = useLocation();\n  const urlReqCompanyName = location.state[\"companyName\"];\n  // const { totalCons1 } = useGetData(urlReqCompanyName);\n\n  const {\n    data\n  } = useQuery([\"table\"], () => getTable(urlReqCompanyName), {\n    onSuccess: _ref => {\n      let {\n        data\n      } = _ref;\n      countALL(data, \"pros1\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"urlRequest:\", urlReqCompanyName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(CompanyPage, \"Q23uL/n6/GbSpjGGAqQUvnoG7DQ=\", false, function () {\n  return [useLocation, useQuery];\n});\n_c = CompanyPage;\nexport default CompanyPage;\n\n//------------------------------------------------------------------\n// const getList = () => {\n//   axios\n//     .get(\n//       \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//     )\n//     .then((response: any) => {\n//       // 결과값 [{'회사명':카카오, '장점1':'카카오장점1', '장점2':'카카오장점2'}, {'회사명':카카오, '장점1':'카카오장점1', '장점2':'카카오장점2'}]\n//       console.log(response.data);\n//       // wholeData : [{'회사명':'카카오','장점1':'1','장점2':'0'},{'회사명':'카카오','장점1':'1'},...]\n//       const wholeData = response.data;\n//       const 장점1: number[] = [];\n//       {\n//         wholeData.map((item: any) => {\n//           // wholeData의 객체를 하나씩 뽑아서(=item),\n//           // item의 '장점1'의 value들만 미리 만들어놓은 장점1 배열에 push해준다.\n\n//           장점1.push(Number(item.장점1));\n//         });\n//       }\n//       // reduce 함수를 이용해서, 장점1 배열값을 모두 합산해준다.\n//       console.log(장점1);\n//       let result: number = 장점1.reduce(\n//         (total: number, value: number) => (total += value),\n//         0\n//       );\n//       console.log(\"result:\", result);\n//     });\n// };\n//\n//\n//---------------------------------------------\n\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n//\n//\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n//   let pros1Result: number = 0;\n//   // const [dataList, setDataList] = useState([]);\n//   const [pros1State, setPros1State] = useState(0);\n//\n// const getList = () => {\n//   axios\n//     .get(\n//       // 마미껄로 연동한 url\n//       `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/${urlReqCompanyName}`\n//       // `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/naver`\n\n//       // 얘 막힌애임\n//       // `https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/${urlReqCompanyName}`\n//       // \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//     )\n//     .then((response) => {\n//       // response.data : [{'company':kakao, 'comute':'5', 'convenient':'3'...}, {'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//       console.log(\"response.data:\", response.data);\n//       // wholeData : [{'company':kakao, 'comute':'5', 'convenient':'3'...},{'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//       const wholeData = response.data;\n//       // setDataList(wholeData);\n//       // console.log(\"dataList에 담겼니? dataList:\", dataList);\n//       // 장점1의 배열\n//       console.log(\"wholeData:\", wholeData);\n//       const pros1Array: number[] = [];\n//       {\n//         //wholeData.map((item: any)\n//         wholeData?.map((item: any) => {\n//           // dataList배열의 객체를 하나씩 뽑아서(=item),\n//           // 각 item의  'pros1'의 value만 pros1Array에 push해준다.\n//           // *string배열이었기 때문에, Number로 형변환을 해주기\n//           pros1Array.push(Number(item.pros1));\n//         });\n//       }\n//       console.log(\"pros1Array 잘 들어왔니?\", pros1Array);\n//       // reduce 함수를 이용해, 장점1 안의 배열값들을 모두 합산해준다.\n//       // 이 코드는 구글링해왔음\n//       pros1Result = pros1Array.reduce(\n//         (total: number, value: number) => (total += value),\n//         0\n//       );\n//       console.log(\"getList안에서의 pros1Result:\", pros1Result);\n//       return pros1Result;\n//     })\n//     .then((result) => {\n//       console.log(\"thethen의 리절트\", result);\n//       setPros1State(result);\n//     });\n// };\n\n// // <<주의>>\n// // 1)return위에 useEffect쓰라고 하심\n// // 2) set함수는 마지막에 실행된다.\n// // 3) useEffect는 리턴문이 실행되고나서 실행된다.\n// useEffect(() => {\n//   getList();\n// }, []);\n\n//----------튜터님한테 물어봐야징-------------\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n//   // useLocation() 얘로 바꿔\n//   const [dataState, setDataState] = useState({});\n//   const { data, isError, error, isLoading } = useQuery(\"getPros1Data\", () => {\n//     getPros1Data(urlReqCompanyName);\n//   });\n\n//   useEffect(() => {\n//     // if (data) {\n//     //   console.log(\"data머라고오니\", data);\n//     // }\n//     //  else {\n//     //   console.log(isError, error);\n//     // }\n//     // console.log(data);\n//     if (data) {\n//       setDataState(data);\n//     }\n//     console.log(\"dataState\", dataState);\n//   }, [data]);\n//   console.log(data);\n\n//   if (isLoading) {\n//     return <div>isLoading...</div>;\n//   }\n\n///-----------------------유즈쿼리 사용전 코드-------------------------\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n//   let pros1Result: number = 0;\n//   // const [dataList, setDataList] = useState([]);\n//   const [pros1State, setPros1State] = useState(0);\n\n//   const getList = () => {\n//     axios\n//       .get(\n//         // 마미껄로 연동한 url\n//         `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/${urlReqCompanyName}`\n//         // `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/naver`\n\n//         // 얘 막힌애임\n//         // `https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/${urlReqCompanyName}`\n//         // \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//       )\n//       .then((response) => {\n//         // response.data : [{'company':kakao, 'comute':'5', 'convenient':'3'...}, {'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//         console.log(\"response.data:\", response.data);\n//         // wholeData : [{'company':kakao, 'comute':'5', 'convenient':'3'...},{'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//         const wholeData = response.data;\n//         // setDataList(wholeData);\n//         // console.log(\"dataList에 담겼니? dataList:\", dataList);\n//         // 장점1의 배열\n//         console.log(\"wholeData:\", wholeData);\n//         const pros1Array: number[] = [];\n//         {\n//           // wholeData.map((item: any)\n//           wholeData?.map((item: any) => {\n//             // dataList배열의 객체를 하나씩 뽑아서(=item),\n//             // 각 item의  'pros1'의 value만 pros1Array에 push해준다.\n//             // *string배열이었기 때문에, Number로 형변환을 해주기\n//             // ['1','1','0']\n//             pros1Array.push(Number(item.pros1));\n//           });\n//         }\n//         console.log(\"pros1Array 잘 들어왔니?\", pros1Array);\n//         // reduce 함수를 이용해, 장점1 안의 배열값들을 모두 합산해준다.\n//         // 이 코드는 구글링해왔음\n//         pros1Result = pros1Array.reduce(\n//           (total: number, value: number) => (total += value),\n//           0\n//         );\n//         console.log(\"getList안에서의 pros1Result:\", pros1Result);\n//         return pros1Result;\n//       })\n//       .then((result) => {\n//         console.log(\"thethen의 리절트\", result);\n//         setPros1State(result);\n//       });\n//   };\n\n//   // <<주의>>\n//   // 1)return위에 useEffect쓰라고 하심\n//   // 2) set함수는 마지막에 실행된다.\n//   // 3) useEffect는 리턴문이 실행되고나서 실행된다.\n//   useEffect(() => {\n//     getList();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h3>urlRequest:{urlReqCompanyName}</h3>\n//       <h3>pros1의 합계 : {pros1State}</h3>\n//     </div>\n//   );\n// };\n\n// export default CompanyPage;\n//------------------짜투리코드들---------------\n\n// const queryClient = useQueryClient();\n// const { data, isError, error, isLoading } = useQuery(\"getPros1Data\", () => {\n//   // axios.get(\"https://jsonplaceholder.typicode.com/todos/1\");\n//   getPros1Data(urlReqCompanyName);\n// });\n//-----------------\n// const { data } = useQuery({\n//   //      ^? const data: string | undefined\n//   queryKey: [\"getPros1Data\"],\n//   queryFn: () => {\n//     getPros1Data(urlReqCompanyName).then((response) =>\n//       setDataState(response)\n//     );\n//   },\n// });\n//------------------------------------\n// function getData :TData() {\n//   const { data } = useQuery <\n//   TData = TQueryFnData,\n// >(\"getPros1Data\", getPros1Data(urlReqCompanyName), {\n//     select: (data) => data,\n//   });\n//   return <div>Username: {data}</div>;\n// }\n//-----------------------------------\n\n// useEffect(() => {\n//   console.log(\"useEffect실행\");\n//   console.log(\"data는\", data);\n//   console.log(\"넌뜬금없이나오니\", dataState);\n// }, [dataState]);\n// --------------------------------------------\n\n// //------------------\n// useEffect(() => {\n//   console.log(\"useEffect의 data\", data);\n// }, []);\n\n// if (isLoading) {\n//   return <div>isLoading...</div>;\n// }\n\n// if (error || isError) {\n//   console.log(\"error이거나 isError다.\");\n// }\n//----------------------------------supabase연결됏엇던 코드(아래)---------------\n// import { useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// // import usePropsQuery from \"../hooks/useProsQuery\";\n// import { supabase } from \"../util/supabase\";\n\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n\n//   // const { sheetData } = usePropsQuery(urlReqCompanyName);\n\n//   const getTable = async () => {\n//     const { data, error } = await supabase.from(\"testTable\").select();\n//     if (data) {\n//       console.log(data);\n//     }\n//     if (error) {\n//       console.log(error);\n//     }\n//   };\n//   console.log(\"supabase:\", supabase);\n\n//   useEffect(() => {\n//     getTable();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h3>urlRequest:{urlReqCompanyName}</h3>\n//       {/* <h3>pros1의 합계 : {pros1State}</h3> */}\n//     </div>\n//   );\n// };\n\n// export default CompanyPage;\nvar _c;\n$RefreshReg$(_c, \"CompanyPage\");","map":{"version":3,"names":["useLocation","getTable","useQuery","countALL","CompanyPage","location","urlReqCompanyName","state","data","onSuccess"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround-supabase-customHook/src/pages/CompanyPage.tsx"],"sourcesContent":["import { useLocation } from \"react-router-dom\";\nimport useGetData, { getTable } from \"../hooks/useGetData\";\nimport { useQuery } from \"react-query\";\nimport countALL from \"../util/countALL\";\n\nconst CompanyPage = () => {\n  const location = useLocation();\n  const urlReqCompanyName = location.state[\"companyName\"];\n  // const { totalCons1 } = useGetData(urlReqCompanyName);\n\n  const { data } = useQuery<any>([\"table\"], () => getTable(urlReqCompanyName), {\n    onSuccess: ({ data }) => {\n      countALL(data, \"pros1\");\n    },\n  });\n\n  return (\n    <div>\n      <h3>urlRequest:{urlReqCompanyName}</h3>\n      {/* <h3>pros1의 합계 : {totalCons1}</h3> */}\n      {/* <h3>commute의 평균 : {b}</h3> */}\n    </div>\n  );\n};\n\nexport default CompanyPage;\n\n//------------------------------------------------------------------\n// const getList = () => {\n//   axios\n//     .get(\n//       \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//     )\n//     .then((response: any) => {\n//       // 결과값 [{'회사명':카카오, '장점1':'카카오장점1', '장점2':'카카오장점2'}, {'회사명':카카오, '장점1':'카카오장점1', '장점2':'카카오장점2'}]\n//       console.log(response.data);\n//       // wholeData : [{'회사명':'카카오','장점1':'1','장점2':'0'},{'회사명':'카카오','장점1':'1'},...]\n//       const wholeData = response.data;\n//       const 장점1: number[] = [];\n//       {\n//         wholeData.map((item: any) => {\n//           // wholeData의 객체를 하나씩 뽑아서(=item),\n//           // item의 '장점1'의 value들만 미리 만들어놓은 장점1 배열에 push해준다.\n\n//           장점1.push(Number(item.장점1));\n//         });\n//       }\n//       // reduce 함수를 이용해서, 장점1 배열값을 모두 합산해준다.\n//       console.log(장점1);\n//       let result: number = 장점1.reduce(\n//         (total: number, value: number) => (total += value),\n//         0\n//       );\n//       console.log(\"result:\", result);\n//     });\n// };\n//\n//\n//---------------------------------------------\n\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n//\n//\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n//   let pros1Result: number = 0;\n//   // const [dataList, setDataList] = useState([]);\n//   const [pros1State, setPros1State] = useState(0);\n//\n// const getList = () => {\n//   axios\n//     .get(\n//       // 마미껄로 연동한 url\n//       `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/${urlReqCompanyName}`\n//       // `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/naver`\n\n//       // 얘 막힌애임\n//       // `https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/${urlReqCompanyName}`\n//       // \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//     )\n//     .then((response) => {\n//       // response.data : [{'company':kakao, 'comute':'5', 'convenient':'3'...}, {'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//       console.log(\"response.data:\", response.data);\n//       // wholeData : [{'company':kakao, 'comute':'5', 'convenient':'3'...},{'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//       const wholeData = response.data;\n//       // setDataList(wholeData);\n//       // console.log(\"dataList에 담겼니? dataList:\", dataList);\n//       // 장점1의 배열\n//       console.log(\"wholeData:\", wholeData);\n//       const pros1Array: number[] = [];\n//       {\n//         //wholeData.map((item: any)\n//         wholeData?.map((item: any) => {\n//           // dataList배열의 객체를 하나씩 뽑아서(=item),\n//           // 각 item의  'pros1'의 value만 pros1Array에 push해준다.\n//           // *string배열이었기 때문에, Number로 형변환을 해주기\n//           pros1Array.push(Number(item.pros1));\n//         });\n//       }\n//       console.log(\"pros1Array 잘 들어왔니?\", pros1Array);\n//       // reduce 함수를 이용해, 장점1 안의 배열값들을 모두 합산해준다.\n//       // 이 코드는 구글링해왔음\n//       pros1Result = pros1Array.reduce(\n//         (total: number, value: number) => (total += value),\n//         0\n//       );\n//       console.log(\"getList안에서의 pros1Result:\", pros1Result);\n//       return pros1Result;\n//     })\n//     .then((result) => {\n//       console.log(\"thethen의 리절트\", result);\n//       setPros1State(result);\n//     });\n// };\n\n// // <<주의>>\n// // 1)return위에 useEffect쓰라고 하심\n// // 2) set함수는 마지막에 실행된다.\n// // 3) useEffect는 리턴문이 실행되고나서 실행된다.\n// useEffect(() => {\n//   getList();\n// }, []);\n\n//----------튜터님한테 물어봐야징-------------\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n//   // useLocation() 얘로 바꿔\n//   const [dataState, setDataState] = useState({});\n//   const { data, isError, error, isLoading } = useQuery(\"getPros1Data\", () => {\n//     getPros1Data(urlReqCompanyName);\n//   });\n\n//   useEffect(() => {\n//     // if (data) {\n//     //   console.log(\"data머라고오니\", data);\n//     // }\n//     //  else {\n//     //   console.log(isError, error);\n//     // }\n//     // console.log(data);\n//     if (data) {\n//       setDataState(data);\n//     }\n//     console.log(\"dataState\", dataState);\n//   }, [data]);\n//   console.log(data);\n\n//   if (isLoading) {\n//     return <div>isLoading...</div>;\n//   }\n\n///-----------------------유즈쿼리 사용전 코드-------------------------\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n//   let pros1Result: number = 0;\n//   // const [dataList, setDataList] = useState([]);\n//   const [pros1State, setPros1State] = useState(0);\n\n//   const getList = () => {\n//     axios\n//       .get(\n//         // 마미껄로 연동한 url\n//         `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/${urlReqCompanyName}`\n//         // `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/naver`\n\n//         // 얘 막힌애임\n//         // `https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/${urlReqCompanyName}`\n//         // \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//       )\n//       .then((response) => {\n//         // response.data : [{'company':kakao, 'comute':'5', 'convenient':'3'...}, {'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//         console.log(\"response.data:\", response.data);\n//         // wholeData : [{'company':kakao, 'comute':'5', 'convenient':'3'...},{'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//         const wholeData = response.data;\n//         // setDataList(wholeData);\n//         // console.log(\"dataList에 담겼니? dataList:\", dataList);\n//         // 장점1의 배열\n//         console.log(\"wholeData:\", wholeData);\n//         const pros1Array: number[] = [];\n//         {\n//           // wholeData.map((item: any)\n//           wholeData?.map((item: any) => {\n//             // dataList배열의 객체를 하나씩 뽑아서(=item),\n//             // 각 item의  'pros1'의 value만 pros1Array에 push해준다.\n//             // *string배열이었기 때문에, Number로 형변환을 해주기\n//             // ['1','1','0']\n//             pros1Array.push(Number(item.pros1));\n//           });\n//         }\n//         console.log(\"pros1Array 잘 들어왔니?\", pros1Array);\n//         // reduce 함수를 이용해, 장점1 안의 배열값들을 모두 합산해준다.\n//         // 이 코드는 구글링해왔음\n//         pros1Result = pros1Array.reduce(\n//           (total: number, value: number) => (total += value),\n//           0\n//         );\n//         console.log(\"getList안에서의 pros1Result:\", pros1Result);\n//         return pros1Result;\n//       })\n//       .then((result) => {\n//         console.log(\"thethen의 리절트\", result);\n//         setPros1State(result);\n//       });\n//   };\n\n//   // <<주의>>\n//   // 1)return위에 useEffect쓰라고 하심\n//   // 2) set함수는 마지막에 실행된다.\n//   // 3) useEffect는 리턴문이 실행되고나서 실행된다.\n//   useEffect(() => {\n//     getList();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h3>urlRequest:{urlReqCompanyName}</h3>\n//       <h3>pros1의 합계 : {pros1State}</h3>\n//     </div>\n//   );\n// };\n\n// export default CompanyPage;\n//------------------짜투리코드들---------------\n\n// const queryClient = useQueryClient();\n// const { data, isError, error, isLoading } = useQuery(\"getPros1Data\", () => {\n//   // axios.get(\"https://jsonplaceholder.typicode.com/todos/1\");\n//   getPros1Data(urlReqCompanyName);\n// });\n//-----------------\n// const { data } = useQuery({\n//   //      ^? const data: string | undefined\n//   queryKey: [\"getPros1Data\"],\n//   queryFn: () => {\n//     getPros1Data(urlReqCompanyName).then((response) =>\n//       setDataState(response)\n//     );\n//   },\n// });\n//------------------------------------\n// function getData :TData() {\n//   const { data } = useQuery <\n//   TData = TQueryFnData,\n// >(\"getPros1Data\", getPros1Data(urlReqCompanyName), {\n//     select: (data) => data,\n//   });\n//   return <div>Username: {data}</div>;\n// }\n//-----------------------------------\n\n// useEffect(() => {\n//   console.log(\"useEffect실행\");\n//   console.log(\"data는\", data);\n//   console.log(\"넌뜬금없이나오니\", dataState);\n// }, [dataState]);\n// --------------------------------------------\n\n// //------------------\n// useEffect(() => {\n//   console.log(\"useEffect의 data\", data);\n// }, []);\n\n// if (isLoading) {\n//   return <div>isLoading...</div>;\n// }\n\n// if (error || isError) {\n//   console.log(\"error이거나 isError다.\");\n// }\n//----------------------------------supabase연결됏엇던 코드(아래)---------------\n// import { useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// // import usePropsQuery from \"../hooks/useProsQuery\";\n// import { supabase } from \"../util/supabase\";\n\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n\n//   // const { sheetData } = usePropsQuery(urlReqCompanyName);\n\n//   const getTable = async () => {\n//     const { data, error } = await supabase.from(\"testTable\").select();\n//     if (data) {\n//       console.log(data);\n//     }\n//     if (error) {\n//       console.log(error);\n//     }\n//   };\n//   console.log(\"supabase:\", supabase);\n\n//   useEffect(() => {\n//     getTable();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h3>urlRequest:{urlReqCompanyName}</h3>\n//       {/* <h3>pros1의 합계 : {pros1State}</h3> */}\n//     </div>\n//   );\n// };\n\n// export default CompanyPage;\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAAqBC,QAAQ,QAAQ,qBAAqB;AAC1D,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,QAAQ,MAAM,kBAAkB;AAAC;AAExC,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB,MAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,MAAMM,iBAAiB,GAAGD,QAAQ,CAACE,KAAK,CAAC,aAAa,CAAC;EACvD;;EAEA,MAAM;IAAEC;EAAK,CAAC,GAAGN,QAAQ,CAAM,CAAC,OAAO,CAAC,EAAE,MAAMD,QAAQ,CAACK,iBAAiB,CAAC,EAAE;IAC3EG,SAAS,EAAE,QAAc;MAAA,IAAb;QAAED;MAAK,CAAC;MAClBL,QAAQ,CAACK,IAAI,EAAE,OAAO,CAAC;IACzB;EACF,CAAC,CAAC;EAEF,oBACE;IAAA,uBACE;MAAA,WAAI,aAAW,EAACF,iBAAiB;IAAA;MAAA;MAAA;MAAA;IAAA;EAAM;IAAA;IAAA;IAAA;EAAA,QAGnC;AAEV,CAAC;AAAC,GAlBIF,WAAW;EAAA,QACEJ,WAAW,EAIXE,QAAQ;AAAA;AAAA,KALrBE,WAAW;AAoBjB,eAAeA,WAAW;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}