{"ast":null,"code":"var _jsxFileName = \"/Users/hongdakyung/Desktop/myWorkSpace/comAround copy/src/pages/CompanyPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useLocation } from \"react-router-dom\";\nimport { getPros1Data } from \"../util/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompanyPage = () => {\n  _s();\n  const location = useLocation();\n  const urlReqCompanyName = location.state[\"companyName\"];\n  // useLocation() 얘로 바꿔\n\n  const {\n    data,\n    isError,\n    error,\n    isLoading\n  } = useQuery([\"getPros1Data\", urlReqCompanyName], () => {\n    getPros1Data(urlReqCompanyName);\n  });\n  useEffect(() => {\n    // if (data) {\n    //   console.log(\"data머라고오니\", data);\n    // } else {\n    //   console.log(isError, error);\n    // }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"urlRequest:\", urlReqCompanyName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(CompanyPage, \"7oiQ+XwxDTrgkVmHiqPpwKMgCjM=\", false, function () {\n  return [useLocation, useQuery];\n});\n_c = CompanyPage;\nexport default CompanyPage;\n\n// const getList = () => {\n//   axios\n//     .get(\n//       \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//     )\n//     .then((response: any) => {\n//       // 결과값 [{'회사명':카카오, '장점1':'카카오장점1', '장점2':'카카오장점2'}, {'회사명':카카오, '장점1':'카카오장점1', '장점2':'카카오장점2'}]\n//       console.log(response.data);\n//       // wholeData : [{'회사명':'카카오','장점1':'1','장점2':'0'},{'회사명':'카카오','장점1':'1'},...]\n//       const wholeData = response.data;\n//       const 장점1: number[] = [];\n//       {\n//         wholeData.map((item: any) => {\n//           // wholeData의 객체를 하나씩 뽑아서(=item),\n//           // item의 '장점1'의 value들만 미리 만들어놓은 장점1 배열에 push해준다.\n\n//           장점1.push(Number(item.장점1));\n//         });\n//       }\n//       // reduce 함수를 이용해서, 장점1 배열값을 모두 합산해준다.\n//       console.log(장점1);\n//       let result: number = 장점1.reduce(\n//         (total: number, value: number) => (total += value),\n//         0\n//       );\n//       console.log(\"result:\", result);\n//     });\n// };\n//\n//\n//---------------------------------------------\n\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n//\n//\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n//   let pros1Result: number = 0;\n//   // const [dataList, setDataList] = useState([]);\n//   const [pros1State, setPros1State] = useState(0);\n//\n// const getList = () => {\n//   axios\n//     .get(\n//       // 마미껄로 연동한 url\n//       `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/${urlReqCompanyName}`\n//       // `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/naver`\n\n//       // 얘 막힌애임\n//       // `https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/${urlReqCompanyName}`\n//       // \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//     )\n//     .then((response) => {\n//       // response.data : [{'company':kakao, 'comute':'5', 'convenient':'3'...}, {'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//       console.log(\"response.data:\", response.data);\n//       // wholeData : [{'company':kakao, 'comute':'5', 'convenient':'3'...},{'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//       const wholeData = response.data;\n//       // setDataList(wholeData);\n//       // console.log(\"dataList에 담겼니? dataList:\", dataList);\n//       // 장점1의 배열\n//       console.log(\"wholeData:\", wholeData);\n//       const pros1Array: number[] = [];\n//       {\n//         //wholeData.map((item: any)\n//         wholeData?.map((item: any) => {\n//           // dataList배열의 객체를 하나씩 뽑아서(=item),\n//           // 각 item의  'pros1'의 value만 pros1Array에 push해준다.\n//           // *string배열이었기 때문에, Number로 형변환을 해주기\n//           pros1Array.push(Number(item.pros1));\n//         });\n//       }\n//       console.log(\"pros1Array 잘 들어왔니?\", pros1Array);\n//       // reduce 함수를 이용해, 장점1 안의 배열값들을 모두 합산해준다.\n//       // 이 코드는 구글링해왔음\n//       pros1Result = pros1Array.reduce(\n//         (total: number, value: number) => (total += value),\n//         0\n//       );\n//       console.log(\"getList안에서의 pros1Result:\", pros1Result);\n//       return pros1Result;\n//     })\n//     .then((result) => {\n//       console.log(\"thethen의 리절트\", result);\n//       setPros1State(result);\n//     });\n// };\n\n// // <<주의>>\n// // 1)return위에 useEffect쓰라고 하심\n// // 2) set함수는 마지막에 실행된다.\n// // 3) useEffect는 리턴문이 실행되고나서 실행된다.\n// useEffect(() => {\n//   getList();\n// }, []);\nvar _c;\n$RefreshReg$(_c, \"CompanyPage\");","map":{"version":3,"names":["useEffect","useQuery","useLocation","getPros1Data","CompanyPage","location","urlReqCompanyName","state","data","isError","error","isLoading"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround copy/src/pages/CompanyPage.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { getPros1Data } from \"../util/api\";\n\nconst CompanyPage = () => {\n  const location = useLocation();\n  const urlReqCompanyName = location.state[\"companyName\"];\n  // useLocation() 얘로 바꿔\n\n  const { data, isError, error, isLoading } = useQuery(\n    [\"getPros1Data\", urlReqCompanyName],\n    () => {\n      getPros1Data(urlReqCompanyName);\n    }\n  );\n\n  useEffect(() => {\n    // if (data) {\n    //   console.log(\"data머라고오니\", data);\n    // } else {\n    //   console.log(isError, error);\n    // }\n  }, [data]);\n\n  return (\n    <div>\n      <h3>urlRequest:{urlReqCompanyName}</h3>\n    </div>\n  );\n};\n\nexport default CompanyPage;\n\n// const getList = () => {\n//   axios\n//     .get(\n//       \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//     )\n//     .then((response: any) => {\n//       // 결과값 [{'회사명':카카오, '장점1':'카카오장점1', '장점2':'카카오장점2'}, {'회사명':카카오, '장점1':'카카오장점1', '장점2':'카카오장점2'}]\n//       console.log(response.data);\n//       // wholeData : [{'회사명':'카카오','장점1':'1','장점2':'0'},{'회사명':'카카오','장점1':'1'},...]\n//       const wholeData = response.data;\n//       const 장점1: number[] = [];\n//       {\n//         wholeData.map((item: any) => {\n//           // wholeData의 객체를 하나씩 뽑아서(=item),\n//           // item의 '장점1'의 value들만 미리 만들어놓은 장점1 배열에 push해준다.\n\n//           장점1.push(Number(item.장점1));\n//         });\n//       }\n//       // reduce 함수를 이용해서, 장점1 배열값을 모두 합산해준다.\n//       console.log(장점1);\n//       let result: number = 장점1.reduce(\n//         (total: number, value: number) => (total += value),\n//         0\n//       );\n//       console.log(\"result:\", result);\n//     });\n// };\n//\n//\n//---------------------------------------------\n\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n//\n//\n// const CompanyPage = () => {\n//   const location = useLocation();\n//   const urlReqCompanyName = location.state[\"companyName\"];\n//   let pros1Result: number = 0;\n//   // const [dataList, setDataList] = useState([]);\n//   const [pros1State, setPros1State] = useState(0);\n//\n// const getList = () => {\n//   axios\n//     .get(\n//       // 마미껄로 연동한 url\n//       `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/${urlReqCompanyName}`\n//       // `https://sheet.best/api/sheets/96f08cd2-b20d-452a-8442-517f9353968f/company/naver`\n\n//       // 얘 막힌애임\n//       // `https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/${urlReqCompanyName}`\n//       // \"https://sheet.best/api/sheets/325137bc-19de-426f-a61c-bae2208f94db/company/kakao\"\n//     )\n//     .then((response) => {\n//       // response.data : [{'company':kakao, 'comute':'5', 'convenient':'3'...}, {'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//       console.log(\"response.data:\", response.data);\n//       // wholeData : [{'company':kakao, 'comute':'5', 'convenient':'3'...},{'company':kakao, 'comute':'5', 'convenient':'3'...}]\n//       const wholeData = response.data;\n//       // setDataList(wholeData);\n//       // console.log(\"dataList에 담겼니? dataList:\", dataList);\n//       // 장점1의 배열\n//       console.log(\"wholeData:\", wholeData);\n//       const pros1Array: number[] = [];\n//       {\n//         //wholeData.map((item: any)\n//         wholeData?.map((item: any) => {\n//           // dataList배열의 객체를 하나씩 뽑아서(=item),\n//           // 각 item의  'pros1'의 value만 pros1Array에 push해준다.\n//           // *string배열이었기 때문에, Number로 형변환을 해주기\n//           pros1Array.push(Number(item.pros1));\n//         });\n//       }\n//       console.log(\"pros1Array 잘 들어왔니?\", pros1Array);\n//       // reduce 함수를 이용해, 장점1 안의 배열값들을 모두 합산해준다.\n//       // 이 코드는 구글링해왔음\n//       pros1Result = pros1Array.reduce(\n//         (total: number, value: number) => (total += value),\n//         0\n//       );\n//       console.log(\"getList안에서의 pros1Result:\", pros1Result);\n//       return pros1Result;\n//     })\n//     .then((result) => {\n//       console.log(\"thethen의 리절트\", result);\n//       setPros1State(result);\n//     });\n// };\n\n// // <<주의>>\n// // 1)return위에 useEffect쓰라고 하심\n// // 2) set함수는 마지막에 실행된다.\n// // 3) useEffect는 리턴문이 실행되고나서 실행된다.\n// useEffect(() => {\n//   getList();\n// }, []);\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,WAAW,QAAmB,kBAAkB;AACzD,SAASC,YAAY,QAAQ,aAAa;AAAC;AAE3C,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAC9B,MAAMI,iBAAiB,GAAGD,QAAQ,CAACE,KAAK,CAAC,aAAa,CAAC;EACvD;;EAEA,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGV,QAAQ,CAClD,CAAC,cAAc,EAAEK,iBAAiB,CAAC,EACnC,MAAM;IACJH,YAAY,CAACG,iBAAiB,CAAC;EACjC,CAAC,CACF;EAEDN,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;EAAA,CACD,EAAE,CAACQ,IAAI,CAAC,CAAC;EAEV,oBACE;IAAA,uBACE;MAAA,WAAI,aAAW,EAACF,iBAAiB;IAAA;MAAA;MAAA;MAAA;IAAA;EAAM;IAAA;IAAA;IAAA;EAAA,QACnC;AAEV,CAAC;AAAC,GAzBIF,WAAW;EAAA,QACEF,WAAW,EAIgBD,QAAQ;AAAA;AAAA,KALhDG,WAAW;AA2BjB,eAAeA,WAAW;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}