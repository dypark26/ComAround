{"ast":null,"code":"// companyData : 해당 회사의 전체 데이터입니다.\n// category : commute | convenient | restaurant 가 들어옵니다.\n// countAVE 함수 : 인자로 들어온 'category'의 평균값을 계산하는 함수입니다. 리턴값은 계산된 평균값 1개입니다.\n// ⭐️ any로 타입 지정해놓은 부분은 supabase 계정 merge 후에 수정하도록 하겠습니다.\nconst countAVE = (companyData, category) => {\n  let commuteAve = 0;\n  companyData === null || companyData === void 0 ? void 0 : companyData.map(item => {\n    console.log(\"item-countAVE:\", item);\n  });\n  return 1;\n};\nexport default countAVE;\n\n//-----// companyData : 해당 회사의 전체 데이터입니다.\n// // category : commute | convenient | restaurant 가 들어옵니다.\n// // countAVE 함수 : 인자로 들어온 'category'의 평균값을 계산하는 함수입니다. 리턴값은 계산된 평균값 1개입니다.\n// // ⭐️ any로 타입 지정해놓은 부분은 supabase 계정 merge 후에 수정하도록 하겠습니다.\n// const countAVE = (companyData: any, category: string): number => {\n//   let commuteAve: number = 0;\n//   companyData?.map((item: any) => {\n//     const aveArray: number[] = [];\n//     console.log(\"item[category]:\", item[category]);\n//     aveArray.push(item[category]);\n//     console.log(\"aveArray.length :\", aveArray.length);\n//     let commuteTotalResult: number = aveArray.reduce(\n//       (total: number, value: number) => (total += value),\n//       0\n//     );\n//     console.log(\"commuteTotalResult는 commute의 총합\", commuteTotalResult);\n//     commuteAve = commuteTotalResult / aveArray.length;\n//     console.log(\"commuteAve(평균값):\", commuteAve);\n//   });\n//   return commuteAve;\n// };\n\n// export default countAVE;","map":{"version":3,"names":["countAVE","companyData","category","commuteAve","map","item","console","log"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround/src/util/countAVE.tsx"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n\n// companyData : 해당 회사의 전체 데이터입니다.\n// category : commute | convenient | restaurant 가 들어옵니다.\n// countAVE 함수 : 인자로 들어온 'category'의 평균값을 계산하는 함수입니다. 리턴값은 계산된 평균값 1개입니다.\n// ⭐️ any로 타입 지정해놓은 부분은 supabase 계정 merge 후에 수정하도록 하겠습니다.\nconst countAVE = (companyData: any, category: string): number => {\n  let commuteAve: number = 0;\n  companyData?.map((item: any) => {\n    console.log(\"item-countAVE:\", item);\n  });\n  return 1;\n};\n\nexport default countAVE;\n\n//-----// companyData : 해당 회사의 전체 데이터입니다.\n// // category : commute | convenient | restaurant 가 들어옵니다.\n// // countAVE 함수 : 인자로 들어온 'category'의 평균값을 계산하는 함수입니다. 리턴값은 계산된 평균값 1개입니다.\n// // ⭐️ any로 타입 지정해놓은 부분은 supabase 계정 merge 후에 수정하도록 하겠습니다.\n// const countAVE = (companyData: any, category: string): number => {\n//   let commuteAve: number = 0;\n//   companyData?.map((item: any) => {\n//     const aveArray: number[] = [];\n//     console.log(\"item[category]:\", item[category]);\n//     aveArray.push(item[category]);\n//     console.log(\"aveArray.length :\", aveArray.length);\n//     let commuteTotalResult: number = aveArray.reduce(\n//       (total: number, value: number) => (total += value),\n//       0\n//     );\n//     console.log(\"commuteTotalResult는 commute의 총합\", commuteTotalResult);\n//     commuteAve = commuteTotalResult / aveArray.length;\n//     console.log(\"commuteAve(평균값):\", commuteAve);\n//   });\n//   return commuteAve;\n// };\n\n// export default countAVE;\n"],"mappings":"AAGA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,CAACC,WAAgB,EAAEC,QAAgB,KAAa;EAC/D,IAAIC,UAAkB,GAAG,CAAC;EAC1BF,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,GAAG,CAAEC,IAAS,IAAK;IAC9BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;EACrC,CAAC,CAAC;EACF,OAAO,CAAC;AACV,CAAC;AAED,eAAeL,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}