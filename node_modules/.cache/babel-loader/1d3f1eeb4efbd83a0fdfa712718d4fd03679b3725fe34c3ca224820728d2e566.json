{"ast":null,"code":"// companyData : 해당 회사의 전체 데이터입니다.\n// category : pros1~5 | cons1~5 가 들어옵니다.\n\nconst countALL = (companyData, prosType) => {\n  const prosTypeArr = [];\n  let commuteTotalResult = 0;\n  companyData.forEach(item => {\n    console.log(\"item-countALL:\", item);\n    console.log(\"item[prosType]\", item[prosType]); //true\n    if (item[prosType] === true) {\n      prosTypeArr.push(item[prosType]);\n    }\n    console.log(\"prosTypeArr:\", prosTypeArr);\n    commuteTotalResult = prosTypeArr.length;\n    console.log(\"배열총개수:\", commuteTotalResult);\n  });\n  return commuteTotalResult;\n};\nexport default countALL;\n\n// ⭐️ 추후 해당 코드로 계산 로직이 변경될 예정입니다 ⭐️\n// if (data) {\n//   data?.map((item: any) => {\n//     if (item.pros1 === true) {\n//       pros1Array.push(item.pros1);\n//     }\n//     console.log(\"pros1 이 true인 애들 (2개임)\", pros1Array);\n//     console.log(\"naver / pros1 총 갯수는?\", pros1Array.length);\n//   });\n// }\n\n//-------\n\n// companyData : 해당 회사의 전체 데이터입니다.\n// category : pros1~5 | cons1~5 가 들어옵니다.\n// countALL 함수 : 인자로 들어온 'prosType'의 총합산을 하는 함수입니다. 리턴값은 계산된 합계값 1개입니다.\n// // ⭐️ any로 타입 지정해놓은 부분은 supabase 계정 merge 후에 수정하도록 하겠습니다.\n// const countALL = (companyData: any[], prosType: string): number => {\n//   const prosTypeArr: number[] = [];\n//   companyData.forEach((item) => {\n//     // +item[prosType] : 해당 prosType의 value를 뽑아오면서 '+'를 통해 Number타입으로 형변환됩니다.\n//     // ⭐️ 추후 데이터는 1,0이 아닌 true,false로 들어가게 되며 이 식은 1,0일때의 계산식입니다.\n//     // ⭐️ 추후 아래 23번 라인 주석으로 처리된 다영님 코드로 변경될 예정입니다.\n//     prosTypeArr.push(+item[prosType]);\n//   });\n//   let commuteTotalResult: number = prosTypeArr.reduce(\n//     (total: number, value: number) => (total += value),\n//     0\n//   );\n//   return commuteTotalResult;\n// };\n\n// export default countALL;","map":{"version":3,"names":["countALL","companyData","prosType","prosTypeArr","commuteTotalResult","forEach","item","console","log","push","length"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround/src/util/countALL.ts"],"sourcesContent":["// companyData : 해당 회사의 전체 데이터입니다.\n// category : pros1~5 | cons1~5 가 들어옵니다.\n\nconst countALL = (companyData: any[], prosType: string): number => {\n  const prosTypeArr: number[] = [];\n  let commuteTotalResult = 0;\n  companyData.forEach((item) => {\n    console.log(\"item-countALL:\", item);\n    console.log(\"item[prosType]\", item[prosType]); //true\n    if (item[prosType] === true) {\n      prosTypeArr.push(item[prosType]);\n    }\n    console.log(\"prosTypeArr:\", prosTypeArr);\n    commuteTotalResult = prosTypeArr.length;\n    console.log(\"배열총개수:\", commuteTotalResult);\n  });\n\n  return commuteTotalResult;\n};\n\nexport default countALL;\n\n// ⭐️ 추후 해당 코드로 계산 로직이 변경될 예정입니다 ⭐️\n// if (data) {\n//   data?.map((item: any) => {\n//     if (item.pros1 === true) {\n//       pros1Array.push(item.pros1);\n//     }\n//     console.log(\"pros1 이 true인 애들 (2개임)\", pros1Array);\n//     console.log(\"naver / pros1 총 갯수는?\", pros1Array.length);\n//   });\n// }\n\n//-------\n\n// companyData : 해당 회사의 전체 데이터입니다.\n// category : pros1~5 | cons1~5 가 들어옵니다.\n// countALL 함수 : 인자로 들어온 'prosType'의 총합산을 하는 함수입니다. 리턴값은 계산된 합계값 1개입니다.\n// // ⭐️ any로 타입 지정해놓은 부분은 supabase 계정 merge 후에 수정하도록 하겠습니다.\n// const countALL = (companyData: any[], prosType: string): number => {\n//   const prosTypeArr: number[] = [];\n//   companyData.forEach((item) => {\n//     // +item[prosType] : 해당 prosType의 value를 뽑아오면서 '+'를 통해 Number타입으로 형변환됩니다.\n//     // ⭐️ 추후 데이터는 1,0이 아닌 true,false로 들어가게 되며 이 식은 1,0일때의 계산식입니다.\n//     // ⭐️ 추후 아래 23번 라인 주석으로 처리된 다영님 코드로 변경될 예정입니다.\n//     prosTypeArr.push(+item[prosType]);\n//   });\n//   let commuteTotalResult: number = prosTypeArr.reduce(\n//     (total: number, value: number) => (total += value),\n//     0\n//   );\n//   return commuteTotalResult;\n// };\n\n// export default countALL;\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,QAAQ,GAAG,CAACC,WAAkB,EAAEC,QAAgB,KAAa;EACjE,MAAMC,WAAqB,GAAG,EAAE;EAChC,IAAIC,kBAAkB,GAAG,CAAC;EAC1BH,WAAW,CAACI,OAAO,CAAEC,IAAI,IAAK;IAC5BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;IACnCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAII,IAAI,CAACJ,QAAQ,CAAC,KAAK,IAAI,EAAE;MAC3BC,WAAW,CAACM,IAAI,CAACH,IAAI,CAACJ,QAAQ,CAAC,CAAC;IAClC;IACAK,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,WAAW,CAAC;IACxCC,kBAAkB,GAAGD,WAAW,CAACO,MAAM;IACvCH,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,kBAAkB,CAAC;EAC3C,CAAC,CAAC;EAEF,OAAOA,kBAAkB;AAC3B,CAAC;AAED,eAAeJ,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}