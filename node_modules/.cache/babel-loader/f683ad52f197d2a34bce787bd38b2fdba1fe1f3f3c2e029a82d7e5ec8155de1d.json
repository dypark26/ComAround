{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from \"react-query\";\nimport { useEffect, useState } from \"react\";\n// const queryClient = useQueryClient();\nimport axios from \"axios\";\n\n// 불러온 데이터타입\n// company\tcommute\tconvenient\trestaurant\tpros1\tpros2\tpros3\tpros4\tpros5\tcons1\tcons2\tcons3\tcons4\tcons5\n// 정익님이 짜주신 코드-------------------------\n\n// 정익님이 짜주신 코드-------------------------\n// const usePropsQuery = () => {\n//   const [testData, setTestData] = useState({});\n//   const { data } = useQuery<RootObject>(\"temp\", async () => {\n//     const { data } = await axios.get(\n//       \"https://jsonplaceholder.typicode.com/todos/1\"\n//     );\n//     return data;\n//   });\n// 정익님이 짜주신 코드-------------------------\n\n// undefined가 떴던 이유? typing을 안해줬기 때문\n// 안되었던 코드 :const { data } = useQuery(\"getPros1Data\", () =>\n// 해결된 코드 : const { data } = useQuery<surverResponseType>(\"getPros1Data\", () =>\nconst usePropsQuery = urlReqCompanyName => {\n  _s();\n  const [sheetData, setSheetData] = useState({});\n  const {\n    data\n  } = useQuery(\"getPros1Data\", async () => {\n    const {\n      data\n    } = await axios.get(\"https://jsonplaceholder.typicode.com/todos/1\");\n    return data;\n  });\n  useEffect(() => {\n    if (data) {\n      setSheetData(data);\n      console.log(\"data에 변화감지시 useEffect실행\");\n    }\n  }, [data]);\n  return {\n    sheetData\n  };\n};\n_s(usePropsQuery, \"mdph6kVXE7+mRxJFNbA91r418kM=\", false, function () {\n  return [useQuery];\n});\nexport default usePropsQuery;","map":{"version":3,"names":["useQuery","useEffect","useState","axios","usePropsQuery","urlReqCompanyName","sheetData","setSheetData","data","get","console","log"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround copy/src/hooks/useProsQuery.ts"],"sourcesContent":["import { useQueryClient, useQuery } from \"react-query\";\nimport { useEffect, useState } from \"react\";\n// const queryClient = useQueryClient();\nimport axios from \"axios\";\n\n// 불러온 데이터타입\n// company\tcommute\tconvenient\trestaurant\tpros1\tpros2\tpros3\tpros4\tpros5\tcons1\tcons2\tcons3\tcons4\tcons5\n// 정익님이 짜주신 코드-------------------------\ninterface RootObject {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n// 정익님이 짜주신 코드-------------------------\n\ninterface surverResponseType {\n  company: string;\n  [key: string]: number | string;\n}\n\n// 정익님이 짜주신 코드-------------------------\n// const usePropsQuery = () => {\n//   const [testData, setTestData] = useState({});\n//   const { data } = useQuery<RootObject>(\"temp\", async () => {\n//     const { data } = await axios.get(\n//       \"https://jsonplaceholder.typicode.com/todos/1\"\n//     );\n//     return data;\n//   });\n// 정익님이 짜주신 코드-------------------------\n\n// undefined가 떴던 이유? typing을 안해줬기 때문\n// 안되었던 코드 :const { data } = useQuery(\"getPros1Data\", () =>\n// 해결된 코드 : const { data } = useQuery<surverResponseType>(\"getPros1Data\", () =>\nconst usePropsQuery = (urlReqCompanyName: string) => {\n  const [sheetData, setSheetData] = useState({});\n  const { data } = useQuery<surverResponseType>(\"getPros1Data\", async () => {\n    const { data } = await axios.get(\n      \"https://jsonplaceholder.typicode.com/todos/1\"\n    );\n    return data;\n  });\n\n  useEffect(() => {\n    if (data) {\n      setSheetData(data);\n      console.log(\"data에 변화감지시 useEffect실행\");\n    }\n  }, [data]);\n\n  return { sheetData };\n};\n\nexport default usePropsQuery;\n"],"mappings":";AAAA,SAAyBA,QAAQ,QAAQ,aAAa;AACtD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,aAAa,GAAIC,iBAAyB,IAAK;EAAA;EACnD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM;IAAEM;EAAK,CAAC,GAAGR,QAAQ,CAAqB,cAAc,EAAE,YAAY;IACxE,MAAM;MAAEQ;IAAK,CAAC,GAAG,MAAML,KAAK,CAACM,GAAG,CAC9B,8CAA8C,CAC/C;IACD,OAAOD,IAAI;EACb,CAAC,CAAC;EAEFP,SAAS,CAAC,MAAM;IACd,IAAIO,IAAI,EAAE;MACRD,YAAY,CAACC,IAAI,CAAC;MAClBE,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACxC;EACF,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC;EAEV,OAAO;IAAEF;EAAU,CAAC;AACtB,CAAC;AAAC,GAjBIF,aAAa;EAAA,QAEAJ,QAAQ;AAAA;AAiB3B,eAAeI,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}