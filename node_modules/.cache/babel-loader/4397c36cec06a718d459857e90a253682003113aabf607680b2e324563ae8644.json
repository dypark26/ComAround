{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nexport const resolveFetch = customFetch => {\n  let _fetch;\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === 'undefined') {\n    _fetch = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return __awaiter(void 0, void 0, void 0, function* () {\n        return yield (yield import('cross-fetch')).fetch(...args);\n      });\n    };\n  } else {\n    _fetch = fetch;\n  }\n  return function () {\n    return _fetch(...arguments);\n  };\n};\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n  if (typeof Response === 'undefined') {\n    return (yield import('cross-fetch')).Response;\n  }\n  return Response;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,MAAMA,YAAY,GAAIC,WAAmB,IAAW;EACzD,IAAIC,MAAa;EACjB,IAAID,WAAW,EAAE;IACfC,MAAM,GAAGD,WAAW;GACrB,MAAM,IAAI,OAAOE,KAAK,KAAK,WAAW,EAAE;IACvCD,MAAM,GAAG;MAAA,kCAAUE,IAAI;QAAJA,IAAI;MAAA;MAAA,OAAIC;QAAC,aAAM,CAAC,MAAM,MAAM,CAAC,aAAa,CAAC,EAAEF,KAAK,CAAC,GAAGC,IAAI,CAAC;MAAA;IAAA;GAC/E,MAAM;IACLF,MAAM,GAAGC,KAAK;;EAEhB,OAAO;IAAA,OAAaD,MAAM,CAAC,YAAO,CAAC;EAAA;AACrC,CAAC;AAED,OAAO,MAAMI,eAAe,GAAG,MAAWD;EACxC,IAAI,OAAOE,QAAQ,KAAK,WAAW,EAAE;IACnC,OAAO,CAAC,MAAM,MAAM,CAAC,aAAa,CAAC,EAAEA,QAAQ;;EAG/C,OAAOA,QAAQ;AACjB,CAAC","names":["resolveFetch","customFetch","_fetch","fetch","args","__awaiter","resolveResponse","Response"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround-supabase/node_modules/@supabase/storage-js/src/lib/helpers.ts"],"sourcesContent":["type Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const resolveResponse = async () => {\n  if (typeof Response === 'undefined') {\n    return (await import('cross-fetch')).Response\n  }\n\n  return Response\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}