{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport GoTrueAdminApi from './GoTrueAdminApi';\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, NETWORK_FAILURE, STORAGE_KEY } from './lib/constants';\nimport { AuthImplicitGrantRedirectError, AuthInvalidCredentialsError, AuthRetryableFetchError, AuthSessionMissingError, AuthUnknownError, isAuthApiError, isAuthError } from './lib/errors';\nimport { _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch';\nimport { decodeJWTPayload, Deferred, getItemAsync, getParameterByName, isBrowser, removeItemAsync, resolveFetch, setItemAsync, uuid } from './lib/helpers';\nimport localStorageAdapter from './lib/local-storage';\nimport { polyfillGlobalThis } from './lib/polyfills';\npolyfillGlobalThis(); // Make \"globalThis\" available\nconst DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS\n};\nexport default class GoTrueClient {\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options) {\n    this.stateChangeEmitters = new Map();\n    this.networkRetries = 0;\n    this.refreshingDeferred = null;\n    /**\n     * Keeps track of the async client initialization.\n     * When null or not yet resolved the auth state is `unknown`\n     * Once resolved the the auth state is known and it's save to call any further client methods.\n     * Keep extra care to never reject or throw uncaught errors\n     */\n    this.initializePromise = null;\n    this.detectSessionInUrl = true;\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.inMemorySession = null;\n    this.storageKey = settings.storageKey;\n    this.autoRefreshToken = settings.autoRefreshToken;\n    this.persistSession = settings.persistSession;\n    this.storage = settings.storage || localStorageAdapter;\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch\n    });\n    this.url = settings.url;\n    this.headers = settings.headers;\n    this.fetch = resolveFetch(settings.fetch);\n    this.detectSessionInUrl = settings.detectSessionInUrl;\n    this.initialize();\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)\n    };\n  }\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  initialize() {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize();\n    }\n    return this.initializePromise;\n  }\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  _initialize() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.initializePromise) {\n        return this.initializePromise;\n      }\n      try {\n        if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {\n          const {\n            data,\n            error\n          } = yield this._getSessionFromUrl();\n          if (error) {\n            // failed login attempt via url,\n            // remove old session as in verifyOtp, signUp and signInWith*\n            yield this._removeSession();\n            return {\n              error\n            };\n          }\n          const {\n            session,\n            redirectType\n          } = data;\n          yield this._saveSession(session);\n          this._notifyAllSubscribers('SIGNED_IN', session);\n          if (redirectType === 'recovery') {\n            this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\n          }\n          return {\n            error: null\n          };\n        }\n        // no login attempt via callback url try to recover session from storage\n        yield this._recoverAndRefresh();\n        return {\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            error\n          };\n        }\n        return {\n          error: new AuthUnknownError('Unexpected error during initialization', error)\n        };\n      } finally {\n        this._handleVisibilityChange();\n      }\n    });\n  }\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  signUp(credentials) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        let res;\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n            body: {\n              email,\n              password,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else {\n          throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n        const session = data.session;\n        const user = data.user;\n        if (data.session) {\n          yield this._saveSession(data.session);\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distingish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login.\n   */\n  signInWithPassword(credentials) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        let res;\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              email,\n              password,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else {\n          throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) return {\n          data: {\n            user: null,\n            session: null\n          },\n          error\n        };\n        if (data.session) {\n          yield this._saveSession(data.session);\n          this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in an existing user via a third-party provider.\n   */\n  signInWithOAuth(credentials) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._removeSession();\n      return this._handleProviderSignIn(credentials.provider, {\n        redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n        scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n        queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams\n      });\n    });\n  }\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   */\n  signInWithOtp(credentials) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        if ('email' in credentials) {\n          const {\n            email,\n            options\n          } = credentials;\n          const {\n            error\n          } = yield _request(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              email,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        if ('phone' in credentials) {\n          const {\n            phone,\n            options\n          } = credentials;\n          const {\n            error\n          } = yield _request(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              phone,\n              data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},\n              create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            }\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw new AuthInvalidCredentialsError('You must provide either an email or phone number.');\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n  verifyOtp(params) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/verify`, {\n          headers: this.headers,\n          body: Object.assign(Object.assign({}, params), {\n            gotrue_meta_security: {\n              captcha_token: (_a = params.options) === null || _a === void 0 ? void 0 : _a.captchaToken\n            }\n          }),\n          redirectTo: (_b = params.options) === null || _b === void 0 ? void 0 : _b.redirectTo,\n          xform: _sessionResponse\n        });\n        if (error) {\n          throw error;\n        }\n        if (!data) {\n          throw 'An error occurred on token verification.';\n        }\n        const session = data.session;\n        const user = data.user;\n        if (session === null || session === void 0 ? void 0 : session.access_token) {\n          yield this._saveSession(session);\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   *\n   * This API is experimental and availability is conditional on correct\n   * settings on the Auth service.\n   *\n   * @experimental\n   */\n  signInWithSSO(params) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        return yield _request(this.fetch, 'POST', `${this.url}/sso`, {\n          body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, 'providerId' in params ? {\n            provider_id: params.providerId\n          } : null), 'domain' in params ? {\n            domain: params.domain\n          } : null), {\n            redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined\n          }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? {\n            gotrue_meta_security: {\n              captcha_token: params.options.captchaToken\n            }\n          } : null), {\n            skip_http_redirect: true\n          }),\n          headers: this.headers,\n          xform: _ssoResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n  getSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // make sure we've read the session from the url if there is one\n      // save to just await, as long we make sure _initialize() never throws\n      yield this.initializePromise;\n      let currentSession = null;\n      if (this.persistSession) {\n        const maybeSession = yield getItemAsync(this.storage, this.storageKey);\n        if (maybeSession !== null) {\n          if (this._isValidSession(maybeSession)) {\n            currentSession = maybeSession;\n          } else {\n            yield this._removeSession();\n          }\n        }\n      } else {\n        currentSession = this.inMemorySession;\n      }\n      if (!currentSession) {\n        return {\n          data: {\n            session: null\n          },\n          error: null\n        };\n      }\n      const hasExpired = currentSession.expires_at ? currentSession.expires_at <= Date.now() / 1000 : false;\n      if (!hasExpired) {\n        return {\n          data: {\n            session: currentSession\n          },\n          error: null\n        };\n      }\n      const {\n        session,\n        error\n      } = yield this._callRefreshToken(currentSession.refresh_token);\n      if (error) {\n        return {\n          data: {\n            session: null\n          },\n          error\n        };\n      }\n      return {\n        data: {\n          session\n        },\n        error: null\n      };\n    });\n  }\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n  getUser(jwt) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!jwt) {\n          const {\n            data,\n            error\n          } = yield this.getSession();\n          if (error) {\n            throw error;\n          }\n          // Default to Authorization header if there is no existing session\n          jwt = (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n        }\n        return yield _request(this.fetch, 'GET', `${this.url}/user`, {\n          headers: this.headers,\n          jwt: jwt,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates user data, if there is a logged in user.\n   */\n  updateUser(attributes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          throw sessionError;\n        }\n        if (!sessionData.session) {\n          throw new AuthSessionMissingError();\n        }\n        const session = sessionData.session;\n        const {\n          data,\n          error: userError\n        } = yield _request(this.fetch, 'PUT', `${this.url}/user`, {\n          headers: this.headers,\n          body: attributes,\n          jwt: session.access_token,\n          xform: _userResponse\n        });\n        if (userError) throw userError;\n        session.user = data.user;\n        yield this._saveSession(session);\n        this._notifyAllSubscribers('USER_UPDATED', session);\n        return {\n          data: {\n            user: session.user\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  _decodeJWT(jwt) {\n    return decodeJWTPayload(jwt);\n  }\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  setSession(currentSession) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!currentSession.access_token || !currentSession.refresh_token) {\n          throw new AuthSessionMissingError();\n        }\n        const timeNow = Date.now() / 1000;\n        let expiresAt = timeNow;\n        let hasExpired = true;\n        let session = null;\n        const payload = decodeJWTPayload(currentSession.access_token);\n        if (payload.exp) {\n          expiresAt = payload.exp;\n          hasExpired = expiresAt <= timeNow;\n        }\n        if (hasExpired) {\n          const {\n            session: refreshedSession,\n            error\n          } = yield this._callRefreshToken(currentSession.refresh_token);\n          if (error) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: error\n            };\n          }\n          if (!refreshedSession) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: null\n            };\n          }\n          session = refreshedSession;\n        } else {\n          const {\n            data,\n            error\n          } = yield this.getUser(currentSession.access_token);\n          if (error) {\n            throw error;\n          }\n          session = {\n            access_token: currentSession.access_token,\n            refresh_token: currentSession.refresh_token,\n            user: data.user,\n            token_type: 'bearer',\n            expires_in: expiresAt - timeNow,\n            expires_at: expiresAt\n          };\n          yield this._saveSession(session);\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user: session.user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  refreshSession(currentSession) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!currentSession) {\n          const {\n            data,\n            error\n          } = yield this.getSession();\n          if (error) {\n            throw error;\n          }\n          currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\n        }\n        if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {\n          throw new AuthSessionMissingError();\n        }\n        const {\n          session,\n          error\n        } = yield this._callRefreshToken(currentSession.refresh_token);\n        if (error) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n        if (!session) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: null\n          };\n        }\n        return {\n          data: {\n            user: session.user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Gets the session data from a URL string\n   */\n  _getSessionFromUrl() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.');\n        if (!this._isImplicitGrantFlow()) {\n          throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\n        }\n        const error_description = getParameterByName('error_description');\n        if (error_description) {\n          const error_code = getParameterByName('error_code');\n          if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.');\n          const error = getParameterByName('error');\n          if (!error) throw new AuthImplicitGrantRedirectError('No error detected.');\n          throw new AuthImplicitGrantRedirectError(error_description, {\n            error,\n            code: error_code\n          });\n        }\n        const provider_token = getParameterByName('provider_token');\n        const provider_refresh_token = getParameterByName('provider_refresh_token');\n        const access_token = getParameterByName('access_token');\n        if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.');\n        const expires_in = getParameterByName('expires_in');\n        if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.');\n        const refresh_token = getParameterByName('refresh_token');\n        if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.');\n        const token_type = getParameterByName('token_type');\n        if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.');\n        const timeNow = Math.round(Date.now() / 1000);\n        const expires_at = timeNow + parseInt(expires_in);\n        const {\n          data,\n          error\n        } = yield this.getUser(access_token);\n        if (error) throw error;\n        const user = data.user;\n        const session = {\n          provider_token,\n          provider_refresh_token,\n          access_token,\n          expires_in: parseInt(expires_in),\n          expires_at,\n          refresh_token,\n          token_type,\n          user\n        };\n        const redirectType = getParameterByName('type');\n        // Remove tokens from URL and popping the URL from the back stack\n        window.location.replace(window.location.href.split('#')[0]);\n        return {\n          data: {\n            session,\n            redirectType\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              redirectType: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  _isImplicitGrantFlow() {\n    return isBrowser() && (Boolean(getParameterByName('access_token')) || Boolean(getParameterByName('error_description')));\n  }\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n  signOut() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data,\n        error: sessionError\n      } = yield this.getSession();\n      if (sessionError) {\n        return {\n          error: sessionError\n        };\n      }\n      const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\n      if (accessToken) {\n        const {\n          error\n        } = yield this.admin.signOut(accessToken);\n        if (error) {\n          // ignore 404s since user might not exist anymore\n          // ignore 401s since an invalid or expired JWT should sign out the current session\n          if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n            return {\n              error\n            };\n          }\n        }\n      }\n      yield this._removeSession();\n      this._notifyAllSubscribers('SIGNED_OUT', null);\n      return {\n        error: null\n      };\n    });\n  }\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(callback) {\n    const id = uuid();\n    const subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id);\n      }\n    };\n    this.stateChangeEmitters.set(id, subscription);\n    return {\n      data: {\n        subscription\n      }\n    };\n  }\n  /**\n   * Sends a password reset request to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  resetPasswordForEmail(email) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'POST', `${this.url}/recover`, {\n          body: {\n            email,\n            gotrue_meta_security: {\n              captcha_token: options.captchaToken\n            }\n          },\n          headers: this.headers,\n          redirectTo: options.redirectTo\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  _refreshAccessToken(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n          body: {\n            refresh_token: refreshToken\n          },\n          headers: this.headers,\n          xform: _sessionResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  _isValidSession(maybeSession) {\n    const isValidSession = typeof maybeSession === 'object' && maybeSession !== null && 'access_token' in maybeSession && 'refresh_token' in maybeSession && 'expires_at' in maybeSession;\n    return isValidSession;\n  }\n  _handleProviderSignIn(provider) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const url = this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams\n    });\n    // try to open on the browser\n    if (isBrowser()) {\n      window.location.assign(url);\n    }\n    return {\n      data: {\n        provider,\n        url\n      },\n      error: null\n    };\n  }\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  _recoverAndRefresh() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const currentSession = yield getItemAsync(this.storage, this.storageKey);\n        if (!this._isValidSession(currentSession)) {\n          if (currentSession !== null) {\n            yield this._removeSession();\n          }\n          return;\n        }\n        const timeNow = Math.round(Date.now() / 1000);\n        if (((_a = currentSession.expires_at) !== null && _a !== void 0 ? _a : Infinity) < timeNow + EXPIRY_MARGIN) {\n          if (this.autoRefreshToken && currentSession.refresh_token) {\n            this.networkRetries++;\n            const {\n              error\n            } = yield this._callRefreshToken(currentSession.refresh_token);\n            if (error) {\n              console.log(error.message);\n              if (error instanceof AuthRetryableFetchError && this.networkRetries < NETWORK_FAILURE.MAX_RETRIES) {\n                if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer);\n                this.refreshTokenTimer = setTimeout(() => this._recoverAndRefresh(), Math.pow(NETWORK_FAILURE.RETRY_INTERVAL, this.networkRetries) * 100 // exponential backoff\n                );\n\n                return;\n              }\n              yield this._removeSession();\n            }\n            this.networkRetries = 0;\n          } else {\n            yield this._removeSession();\n          }\n        } else {\n          if (this.persistSession) {\n            yield this._saveSession(currentSession);\n          }\n          this._notifyAllSubscribers('SIGNED_IN', currentSession);\n        }\n      } catch (err) {\n        console.error(err);\n        return;\n      }\n    });\n  }\n  _callRefreshToken(refreshToken) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      // refreshing is already in progress\n      if (this.refreshingDeferred) {\n        return this.refreshingDeferred.promise;\n      }\n      try {\n        this.refreshingDeferred = new Deferred();\n        if (!refreshToken) {\n          throw new AuthSessionMissingError();\n        }\n        const {\n          data,\n          error\n        } = yield this._refreshAccessToken(refreshToken);\n        if (error) throw error;\n        if (!data.session) throw new AuthSessionMissingError();\n        yield this._saveSession(data.session);\n        this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\n        const result = {\n          session: data.session,\n          error: null\n        };\n        this.refreshingDeferred.resolve(result);\n        return result;\n      } catch (error) {\n        if (isAuthError(error)) {\n          const result = {\n            session: null,\n            error\n          };\n          (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);\n          return result;\n        }\n        (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);\n        throw error;\n      } finally {\n        this.refreshingDeferred = null;\n      }\n    });\n  }\n  _notifyAllSubscribers(event, session) {\n    this.stateChangeEmitters.forEach(x => x.callback(event, session));\n  }\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  _saveSession(session) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.persistSession) {\n        this.inMemorySession = session;\n      }\n      const expiresAt = session.expires_at;\n      if (expiresAt) {\n        const timeNow = Math.round(Date.now() / 1000);\n        const expiresIn = expiresAt - timeNow;\n        const refreshDurationBeforeExpires = expiresIn > EXPIRY_MARGIN ? EXPIRY_MARGIN : 0.5;\n        this._startAutoRefreshToken((expiresIn - refreshDurationBeforeExpires) * 1000);\n      }\n      if (this.persistSession && session.expires_at) {\n        yield this._persistSession(session);\n      }\n    });\n  }\n  _persistSession(currentSession) {\n    return setItemAsync(this.storage, this.storageKey, currentSession);\n  }\n  _removeSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.persistSession) {\n        yield removeItemAsync(this.storage, this.storageKey);\n      } else {\n        this.inMemorySession = null;\n      }\n      if (this.refreshTokenTimer) {\n        clearTimeout(this.refreshTokenTimer);\n      }\n    });\n  }\n  /**\n   * Clear and re-create refresh token timer\n   * @param value time intervals in milliseconds.\n   * @param session The current session.\n   */\n  _startAutoRefreshToken(value) {\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer);\n    if (value <= 0 || !this.autoRefreshToken) return;\n    this.refreshTokenTimer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n      this.networkRetries++;\n      const {\n        data: {\n          session\n        },\n        error: sessionError\n      } = yield this.getSession();\n      if (!sessionError && session) {\n        const {\n          error\n        } = yield this._callRefreshToken(session.refresh_token);\n        if (!error) this.networkRetries = 0;\n        if (error instanceof AuthRetryableFetchError && this.networkRetries < NETWORK_FAILURE.MAX_RETRIES) this._startAutoRefreshToken(Math.pow(NETWORK_FAILURE.RETRY_INTERVAL, this.networkRetries) * 100); // exponential backoff\n      }\n    }), value);\n    if (typeof this.refreshTokenTimer.unref === 'function') this.refreshTokenTimer.unref();\n  }\n  _handleVisibilityChange() {\n    if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n      return false;\n    }\n    try {\n      window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', () => __awaiter(this, void 0, void 0, function* () {\n        if (document.visibilityState === 'visible') {\n          yield this.initializePromise;\n          yield this._recoverAndRefresh();\n        }\n      }));\n    } catch (error) {\n      console.error('_handleVisibilityChange', error);\n    }\n  }\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  _getUrlForProvider(provider, options) {\n    const urlParams = [`provider=${encodeURIComponent(provider)}`];\n    if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n    }\n    if (options === null || options === void 0 ? void 0 : options.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n    }\n    if (options === null || options === void 0 ? void 0 : options.queryParams) {\n      const query = new URLSearchParams(options.queryParams);\n      urlParams.push(query.toString());\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`;\n  }\n  _unenroll(params) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n        return yield _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Enrolls a factor\n   * @param friendlyName Human readable name assigned to a device\n   * @param factorType device which we're validating against. Can only be TOTP for now.\n   * @param issuer domain which the user is enrolling with\n   */\n  _enroll(params) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/factors`, {\n          body: {\n            friendly_name: params.friendlyName,\n            factor_type: params.factorType,\n            issuer: params.issuer\n          },\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n        if (error) {\n          return {\n            data: null,\n            error\n          };\n        }\n        if ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code) {\n          data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;\n        }\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Validates a device as part of the enrollment step.\n   * @param factorId System assigned identifier for authenticator device as returned by enroll\n   * @param code Code Generated by an authenticator device\n   */\n  _verify(params) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/verify`, {\n          body: {\n            code: params.code,\n            challenge_id: params.challengeId\n          },\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n        if (error) {\n          return {\n            data: null,\n            error\n          };\n        }\n        yield this._saveSession(Object.assign({\n          expires_at: Math.round(Date.now() / 1000) + data.expires_in\n        }, data));\n        this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a challenge which a user can verify against\n   * @param factorId System assigned identifier for authenticator device as returned by enroll\n   */\n  _challenge(params) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n        return yield _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/challenge`, {\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a challenge and immediately verifies it\n   * @param factorId System assigned identifier for authenticator device as returned by enroll\n   * @param code Code Generated by an authenticator device\n   */\n  _challengeAndVerify(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: challengeData,\n        error: challengeError\n      } = yield this._challenge({\n        factorId: params.factorId\n      });\n      if (challengeError) {\n        return {\n          data: null,\n          error: challengeError\n        };\n      }\n      return yield this._verify({\n        factorId: params.factorId,\n        challengeId: challengeData.id,\n        code: params.code\n      });\n    });\n  }\n  /**\n   * Displays all devices for a given user\n   */\n  _listFactors() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: {\n          user\n        },\n        error: userError\n      } = yield this.getUser();\n      if (userError) {\n        return {\n          data: null,\n          error: userError\n        };\n      }\n      const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];\n      const totp = factors.filter(factor => factor.factor_type === 'totp' && factor.status === 'verified');\n      return {\n        data: {\n          all: factors,\n          totp\n        },\n        error: null\n      };\n    });\n  }\n  /**\n   * Gets the current and next authenticator assurance level (AAL)\n   * and the current authentication methods for the session (AMR)\n   */\n  _getAuthenticatorAssuranceLevel() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: {\n          session\n        },\n        error: sessionError\n      } = yield this.getSession();\n      if (sessionError) {\n        return {\n          data: null,\n          error: sessionError\n        };\n      }\n      if (!session) {\n        return {\n          data: {\n            currentLevel: null,\n            nextLevel: null,\n            currentAuthenticationMethods: []\n          },\n          error: null\n        };\n      }\n      const payload = this._decodeJWT(session.access_token);\n      let currentLevel = null;\n      if (payload.aal) {\n        currentLevel = payload.aal;\n      }\n      let nextLevel = currentLevel;\n      const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter(factor => factor.status === 'verified')) !== null && _b !== void 0 ? _b : [];\n      if (verifiedFactors.length > 0) {\n        nextLevel = 'aal2';\n      }\n      const currentAuthenticationMethods = payload.amr || [];\n      return {\n        data: {\n          currentLevel,\n          nextLevel,\n          currentAuthenticationMethods\n        },\n        error: null\n      };\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["GoTrueAdminApi","DEFAULT_HEADERS","EXPIRY_MARGIN","GOTRUE_URL","NETWORK_FAILURE","STORAGE_KEY","AuthImplicitGrantRedirectError","AuthInvalidCredentialsError","AuthRetryableFetchError","AuthSessionMissingError","AuthUnknownError","isAuthApiError","isAuthError","_request","_sessionResponse","_userResponse","_ssoResponse","decodeJWTPayload","Deferred","getItemAsync","getParameterByName","isBrowser","removeItemAsync","resolveFetch","setItemAsync","uuid","localStorageAdapter","polyfillGlobalThis","DEFAULT_OPTIONS","url","storageKey","autoRefreshToken","persistSession","detectSessionInUrl","headers","GoTrueClient","constructor","options","Map","settings","inMemorySession","storage","admin","fetch","initialize","mfa","verify","_verify","bind","enroll","_enroll","unenroll","_unenroll","challenge","_challenge","listFactors","_listFactors","challengeAndVerify","_challengeAndVerify","getAuthenticatorAssuranceLevel","_getAuthenticatorAssuranceLevel","initializePromise","_initialize","_isImplicitGrantFlow","data","error","_getSessionFromUrl","_removeSession","session","redirectType","_saveSession","_notifyAllSubscribers","_recoverAndRefresh","_handleVisibilityChange","signUp","credentials","res","email","password","redirectTo","emailRedirectTo","body","gotrue_meta_security","captcha_token","captchaToken","xform","phone","user","signInWithPassword","signInWithOAuth","_handleProviderSignIn","provider","scopes","queryParams","signInWithOtp","create_user","shouldCreateUser","verifyOtp","params","access_token","signInWithSSO","provider_id","providerId","domain","redirect_to","undefined","skip_http_redirect","getSession","currentSession","maybeSession","_isValidSession","hasExpired","expires_at","Date","now","_callRefreshToken","refresh_token","getUser","jwt","updateUser","attributes","sessionData","sessionError","userError","_decodeJWT","setSession","timeNow","expiresAt","payload","exp","refreshedSession","token_type","expires_in","refreshSession","error_description","error_code","code","provider_token","provider_refresh_token","Math","round","parseInt","window","location","replace","href","split","Boolean","signOut","accessToken","status","onAuthStateChange","callback","id","subscription","unsubscribe","stateChangeEmitters","delete","set","resetPasswordForEmail","_refreshAccessToken","refreshToken","isValidSession","_getUrlForProvider","assign","Infinity","networkRetries","console","log","message","MAX_RETRIES","refreshTokenTimer","clearTimeout","setTimeout","RETRY_INTERVAL","err","refreshingDeferred","promise","result","resolve","reject","event","forEach","x","expiresIn","refreshDurationBeforeExpires","_startAutoRefreshToken","_persistSession","value","__awaiter","unref","addEventListener","document","visibilityState","urlParams","encodeURIComponent","push","query","URLSearchParams","toString","join","factorId","friendly_name","friendlyName","factor_type","factorType","issuer","totp","qr_code","challenge_id","challengeId","challengeData","challengeError","factors","filter","factor","all","currentLevel","nextLevel","currentAuthenticationMethods","aal","verifiedFactors","length","amr"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround copy/node_modules/@supabase/gotrue-js/src/GoTrueClient.ts"],"sourcesContent":["import GoTrueAdminApi from './GoTrueAdminApi'\nimport {\n  DEFAULT_HEADERS,\n  EXPIRY_MARGIN,\n  GOTRUE_URL,\n  NETWORK_FAILURE,\n  STORAGE_KEY,\n} from './lib/constants'\nimport {\n  AuthError,\n  AuthImplicitGrantRedirectError,\n  AuthInvalidCredentialsError,\n  AuthRetryableFetchError,\n  AuthSessionMissingError,\n  AuthUnknownError,\n  isAuthApiError,\n  isAuthError,\n} from './lib/errors'\nimport { Fetch, _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch'\nimport {\n  decodeJWTPayload,\n  Deferred,\n  getItemAsync,\n  getParameterByName,\n  isBrowser,\n  removeItemAsync,\n  resolveFetch,\n  setItemAsync,\n  uuid,\n} from './lib/helpers'\nimport localStorageAdapter from './lib/local-storage'\nimport { polyfillGlobalThis } from './lib/polyfills'\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  CallRefreshTokenResult,\n  GoTrueClientOptions,\n  InitializeResult,\n  OAuthResponse,\n  SSOResponse,\n  Provider,\n  Session,\n  SignInWithOAuthCredentials,\n  SignInWithPasswordCredentials,\n  SignInWithPasswordlessCredentials,\n  SignInWithSSO,\n  SignUpWithPasswordCredentials,\n  Subscription,\n  SupportedStorage,\n  User,\n  UserAttributes,\n  UserResponse,\n  VerifyOtpParams,\n  GoTrueMFAApi,\n  MFAEnrollParams,\n  AuthMFAEnrollResponse,\n  MFAChallengeParams,\n  AuthMFAChallengeResponse,\n  MFAUnenrollParams,\n  AuthMFAUnenrollResponse,\n  MFAVerifyParams,\n  AuthMFAVerifyResponse,\n  AuthMFAListFactorsResponse,\n  AMREntry,\n  AuthMFAGetAuthenticatorAssuranceLevelResponse,\n  AuthenticatorAssuranceLevels,\n  Factor,\n  MFAChallengeAndVerifyParams,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS: Omit<Required<GoTrueClientOptions>, 'fetch' | 'storage'> = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS,\n}\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue admin methods.\n   * These methods should only be used in a trusted server-side environment.\n   */\n  admin: GoTrueAdminApi\n  /**\n   * Namespace for the MFA methods.\n   */\n  mfa: GoTrueMFAApi\n  /**\n   * The storage key used to identify the values saved in localStorage\n   */\n  protected storageKey: string\n\n  /**\n   * The session object for the currently logged in user. If null, it means there isn't a logged-in user.\n   * Only used if persistSession is false.\n   */\n  protected inMemorySession: Session | null\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected storage: SupportedStorage\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected refreshTokenTimer?: ReturnType<typeof setTimeout>\n  protected networkRetries = 0\n  protected refreshingDeferred: Deferred<CallRefreshTokenResult> | null = null\n  /**\n   * Keeps track of the async client initialization.\n   * When null or not yet resolved the auth state is `unknown`\n   * Once resolved the the auth state is known and it's save to call any further client methods.\n   * Keep extra care to never reject or throw uncaught errors\n   */\n  protected initializePromise: Promise<InitializeResult> | null = null\n  protected detectSessionInUrl = true\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options: GoTrueClientOptions) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.inMemorySession = null\n    this.storageKey = settings.storageKey\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.storage = settings.storage || localStorageAdapter\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch,\n    })\n\n    this.url = settings.url\n    this.headers = settings.headers\n    this.fetch = resolveFetch(settings.fetch)\n    this.detectSessionInUrl = settings.detectSessionInUrl\n\n    this.initialize()\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n    }\n  }\n\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  initialize(): Promise<InitializeResult> {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize()\n    }\n\n    return this.initializePromise\n  }\n\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  private async _initialize(): Promise<InitializeResult> {\n    if (this.initializePromise) {\n      return this.initializePromise\n    }\n\n    try {\n      if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {\n        const { data, error } = await this._getSessionFromUrl()\n\n        if (error) {\n          // failed login attempt via url,\n          // remove old session as in verifyOtp, signUp and signInWith*\n          await this._removeSession()\n\n          return { error }\n        }\n\n        const { session, redirectType } = data\n\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n        if (redirectType === 'recovery') {\n          this._notifyAllSubscribers('PASSWORD_RECOVERY', session)\n        }\n\n        return { error: null }\n      }\n\n      // no login attempt via callback url try to recover session from storage\n      await this._recoverAndRefresh()\n      return { error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { error }\n      }\n\n      return {\n        error: new AuthUnknownError('Unexpected error during initialization', error),\n      }\n    } finally {\n      this._handleVisibilityChange()\n    }\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUp(credentials: SignUpWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          redirectTo: options?.emailRedirectTo,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n\n      const { data, error } = res\n\n      if (error || !data) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      const session: Session | null = data.session\n      const user: User | null = data.user\n\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distingish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login.\n   */\n  async signInWithPassword(credentials: SignInWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user via a third-party provider.\n   */\n  async signInWithOAuth(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\n    await this._removeSession()\n    return this._handleProviderSignIn(credentials.provider, {\n      redirectTo: credentials.options?.redirectTo,\n      scopes: credentials.options?.scopes,\n      queryParams: credentials.options?.queryParams,\n    })\n  }\n\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   */\n  async signInWithOtp(credentials: SignInWithPasswordlessCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      if ('email' in credentials) {\n        const { email, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            email,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          redirectTo: options?.emailRedirectTo,\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      if ('phone' in credentials) {\n        const { phone, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            phone,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      throw new AuthInvalidCredentialsError('You must provide either an email or phone number.')\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n  async verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\n        headers: this.headers,\n        body: {\n          ...params,\n          gotrue_meta_security: { captcha_token: params.options?.captchaToken },\n        },\n        redirectTo: params.options?.redirectTo,\n        xform: _sessionResponse,\n      })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on token verification.'\n      }\n\n      const session: Session | null = data.session\n      const user: User = data.user\n\n      if (session?.access_token) {\n        await this._saveSession(session as Session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   *\n   * This API is experimental and availability is conditional on correct\n   * settings on the Auth service.\n   *\n   * @experimental\n   */\n  async signInWithSSO(params: SignInWithSSO): Promise<SSOResponse> {\n    try {\n      await this._removeSession()\n\n      return await _request(this.fetch, 'POST', `${this.url}/sso`, {\n        body: {\n          ...('providerId' in params ? { provider_id: params.providerId } : null),\n          ...('domain' in params ? { domain: params.domain } : null),\n          redirect_to: params.options?.redirectTo ?? undefined,\n          ...(params?.options?.captchaToken\n            ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n            : null),\n          skip_http_redirect: true, // fetch does not handle redirects\n        },\n        headers: this.headers,\n        xform: _ssoResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n  async getSession(): Promise<\n    | {\n        data: {\n          session: Session\n        }\n        error: null\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: AuthError\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: null\n      }\n  > {\n    // make sure we've read the session from the url if there is one\n    // save to just await, as long we make sure _initialize() never throws\n    await this.initializePromise\n\n    let currentSession: Session | null = null\n\n    if (this.persistSession) {\n      const maybeSession = await getItemAsync(this.storage, this.storageKey)\n\n      if (maybeSession !== null) {\n        if (this._isValidSession(maybeSession)) {\n          currentSession = maybeSession\n        } else {\n          await this._removeSession()\n        }\n      }\n    } else {\n      currentSession = this.inMemorySession\n    }\n\n    if (!currentSession) {\n      return { data: { session: null }, error: null }\n    }\n\n    const hasExpired = currentSession.expires_at\n      ? currentSession.expires_at <= Date.now() / 1000\n      : false\n    if (!hasExpired) {\n      return { data: { session: currentSession }, error: null }\n    }\n\n    const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n    if (error) {\n      return { data: { session: null }, error }\n    }\n\n    return { data: { session }, error: null }\n  }\n\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n  async getUser(jwt?: string): Promise<UserResponse> {\n    try {\n      if (!jwt) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        // Default to Authorization header if there is no existing session\n        jwt = data.session?.access_token ?? undefined\n      }\n\n      return await _request(this.fetch, 'GET', `${this.url}/user`, {\n        headers: this.headers,\n        jwt: jwt,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates user data, if there is a logged in user.\n   */\n  async updateUser(attributes: UserAttributes): Promise<UserResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        throw sessionError\n      }\n      if (!sessionData.session) {\n        throw new AuthSessionMissingError()\n      }\n      const session: Session = sessionData.session\n      const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\n        headers: this.headers,\n        body: attributes,\n        jwt: session.access_token,\n        xform: _userResponse,\n      })\n      if (userError) throw userError\n      session.user = data.user as User\n      await this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED', session)\n\n      return { data: { user: session.user }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  private _decodeJWT(jwt: string): {\n    exp?: number\n    aal?: AuthenticatorAssuranceLevels | null\n    amr?: AMREntry[] | null\n  } {\n    return decodeJWTPayload(jwt)\n  }\n\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  async setSession(currentSession: {\n    access_token: string\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    try {\n      if (!currentSession.access_token || !currentSession.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const timeNow = Date.now() / 1000\n      let expiresAt = timeNow\n      let hasExpired = true\n      let session: Session | null = null\n      const payload = decodeJWTPayload(currentSession.access_token)\n      if (payload.exp) {\n        expiresAt = payload.exp\n        hasExpired = expiresAt <= timeNow\n      }\n\n      if (hasExpired) {\n        const { session: refreshedSession, error } = await this._callRefreshToken(\n          currentSession.refresh_token\n        )\n        if (error) {\n          return { data: { user: null, session: null }, error: error }\n        }\n\n        if (!refreshedSession) {\n          return { data: { user: null, session: null }, error: null }\n        }\n        session = refreshedSession\n      } else {\n        const { data, error } = await this.getUser(currentSession.access_token)\n        if (error) {\n          throw error\n        }\n        session = {\n          access_token: currentSession.access_token,\n          refresh_token: currentSession.refresh_token,\n          user: data.user,\n          token_type: 'bearer',\n          expires_in: expiresAt - timeNow,\n          expires_at: expiresAt,\n        }\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  async refreshSession(currentSession?: { refresh_token: string }): Promise<AuthResponse> {\n    try {\n      if (!currentSession) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        currentSession = data.session ?? undefined\n      }\n\n      if (!currentSession?.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n      if (error) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      if (!session) {\n        return { data: { user: null, session: null }, error: null }\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets the session data from a URL string\n   */\n  private async _getSessionFromUrl(): Promise<\n    | {\n        data: { session: Session; redirectType: string | null }\n        error: null\n      }\n    | { data: { session: null; redirectType: null }; error: AuthError }\n  > {\n    try {\n      if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.')\n      if (!this._isImplicitGrantFlow()) {\n        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.')\n      }\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) {\n        const error_code = getParameterByName('error_code')\n        if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.')\n        const error = getParameterByName('error')\n        if (!error) throw new AuthImplicitGrantRedirectError('No error detected.')\n\n        throw new AuthImplicitGrantRedirectError(error_description, { error, code: error_code })\n      }\n\n      const provider_token = getParameterByName('provider_token')\n      const provider_refresh_token = getParameterByName('provider_refresh_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { data, error } = await this.getUser(access_token)\n      if (error) throw error\n      const user: User = data.user\n      const session: Session = {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user,\n      }\n      const redirectType = getParameterByName('type')\n\n      // Remove tokens from URL and popping the URL from the back stack\n      window.location.replace(window.location.href.split('#')[0])\n\n      return { data: { session, redirectType }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, redirectType: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  private _isImplicitGrantFlow(): boolean {\n    return (\n      isBrowser() &&\n      (Boolean(getParameterByName('access_token')) ||\n        Boolean(getParameterByName('error_description')))\n    )\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n  async signOut(): Promise<{ error: AuthError | null }> {\n    const { data, error: sessionError } = await this.getSession()\n    if (sessionError) {\n      return { error: sessionError }\n    }\n    const accessToken = data.session?.access_token\n    if (accessToken) {\n      const { error } = await this.admin.signOut(accessToken)\n      if (error) {\n        // ignore 404s since user might not exist anymore\n        // ignore 401s since an invalid or expired JWT should sign out the current session\n        if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n          return { error }\n        }\n      }\n    }\n    await this._removeSession()\n    this._notifyAllSubscribers('SIGNED_OUT', null)\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: { subscription: Subscription }\n  } {\n    const id: string = uuid()\n    const subscription: Subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id)\n      },\n    }\n\n    this.stateChangeEmitters.set(id, subscription)\n\n    return { data: { subscription } }\n  }\n\n  /**\n   * Sends a password reset request to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<\n    | {\n        data: {}\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/recover`, {\n        body: { email, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  private async _refreshAccessToken(refreshToken: string): Promise<AuthResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n        body: { refresh_token: refreshToken },\n        headers: this.headers,\n        xform: _sessionResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n      throw error\n    }\n  }\n\n  private _isValidSession(maybeSession: unknown): maybeSession is Session {\n    const isValidSession =\n      typeof maybeSession === 'object' &&\n      maybeSession !== null &&\n      'access_token' in maybeSession &&\n      'refresh_token' in maybeSession &&\n      'expires_at' in maybeSession\n\n    return isValidSession\n  }\n\n  private _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    } = {}\n  ) {\n    const url: string = this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n    // try to open on the browser\n    if (isBrowser()) {\n      window.location.assign(url)\n    }\n    return { data: { provider, url }, error: null }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const currentSession = await getItemAsync(this.storage, this.storageKey)\n      if (!this._isValidSession(currentSession)) {\n        if (currentSession !== null) {\n          await this._removeSession()\n        }\n\n        return\n      }\n\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if ((currentSession.expires_at ?? Infinity) < timeNow + EXPIRY_MARGIN) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          this.networkRetries++\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n          if (error) {\n            console.log(error.message)\n            if (\n              error instanceof AuthRetryableFetchError &&\n              this.networkRetries < NETWORK_FAILURE.MAX_RETRIES\n            ) {\n              if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n              this.refreshTokenTimer = setTimeout(\n                () => this._recoverAndRefresh(),\n                NETWORK_FAILURE.RETRY_INTERVAL ** this.networkRetries * 100 // exponential backoff\n              )\n              return\n            }\n            await this._removeSession()\n          }\n          this.networkRetries = 0\n        } else {\n          await this._removeSession()\n        }\n      } else {\n        if (this.persistSession) {\n          await this._saveSession(currentSession)\n        }\n        this._notifyAllSubscribers('SIGNED_IN', currentSession)\n      }\n    } catch (err) {\n      console.error(err)\n      return\n    }\n  }\n\n  private async _callRefreshToken(refreshToken: string): Promise<CallRefreshTokenResult> {\n    // refreshing is already in progress\n    if (this.refreshingDeferred) {\n      return this.refreshingDeferred.promise\n    }\n\n    try {\n      this.refreshingDeferred = new Deferred<CallRefreshTokenResult>()\n\n      if (!refreshToken) {\n        throw new AuthSessionMissingError()\n      }\n      const { data, error } = await this._refreshAccessToken(refreshToken)\n      if (error) throw error\n      if (!data.session) throw new AuthSessionMissingError()\n\n      await this._saveSession(data.session)\n      this._notifyAllSubscribers('TOKEN_REFRESHED', data.session)\n\n      const result = { session: data.session, error: null }\n\n      this.refreshingDeferred.resolve(result)\n\n      return result\n    } catch (error) {\n      if (isAuthError(error)) {\n        const result = { session: null, error }\n\n        this.refreshingDeferred?.resolve(result)\n\n        return result\n      }\n\n      this.refreshingDeferred?.reject(error)\n      throw error\n    } finally {\n      this.refreshingDeferred = null\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent, session: Session | null) {\n    this.stateChangeEmitters.forEach((x) => x.callback(event, session))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private async _saveSession(session: Session) {\n    if (!this.persistSession) {\n      this.inMemorySession = session\n    }\n\n    const expiresAt = session.expires_at\n    if (expiresAt) {\n      const timeNow = Math.round(Date.now() / 1000)\n      const expiresIn = expiresAt - timeNow\n      const refreshDurationBeforeExpires = expiresIn > EXPIRY_MARGIN ? EXPIRY_MARGIN : 0.5\n      this._startAutoRefreshToken((expiresIn - refreshDurationBeforeExpires) * 1000)\n    }\n\n    if (this.persistSession && session.expires_at) {\n      await this._persistSession(session)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    return setItemAsync(this.storage, this.storageKey, currentSession)\n  }\n\n  private async _removeSession() {\n    if (this.persistSession) {\n      await removeItemAsync(this.storage, this.storageKey)\n    } else {\n      this.inMemorySession = null\n    }\n\n    if (this.refreshTokenTimer) {\n      clearTimeout(this.refreshTokenTimer)\n    }\n  }\n\n  /**\n   * Clear and re-create refresh token timer\n   * @param value time intervals in milliseconds.\n   * @param session The current session.\n   */\n  private _startAutoRefreshToken(value: number) {\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n    if (value <= 0 || !this.autoRefreshToken) return\n\n    this.refreshTokenTimer = setTimeout(async () => {\n      this.networkRetries++\n      const {\n        data: { session },\n        error: sessionError,\n      } = await this.getSession()\n      if (!sessionError && session) {\n        const { error } = await this._callRefreshToken(session.refresh_token)\n        if (!error) this.networkRetries = 0\n        if (\n          error instanceof AuthRetryableFetchError &&\n          this.networkRetries < NETWORK_FAILURE.MAX_RETRIES\n        )\n          this._startAutoRefreshToken(NETWORK_FAILURE.RETRY_INTERVAL ** this.networkRetries * 100) // exponential backoff\n      }\n    }, value)\n    if (typeof this.refreshTokenTimer.unref === 'function') this.refreshTokenTimer.unref()\n  }\n\n  private _handleVisibilityChange() {\n    if (!isBrowser() || !window?.addEventListener) {\n      return false\n    }\n\n    try {\n      window?.addEventListener('visibilitychange', async () => {\n        if (document.visibilityState === 'visible') {\n          await this.initializePromise\n          await this._recoverAndRefresh()\n        }\n      })\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  private _getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(query.toString())\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  private async _unenroll(params: MFAUnenrollParams): Promise<AuthMFAUnenrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Enrolls a factor\n   * @param friendlyName Human readable name assigned to a device\n   * @param factorType device which we're validating against. Can only be TOTP for now.\n   * @param issuer domain which the user is enrolling with\n   */\n  private async _enroll(params: MFAEnrollParams): Promise<AuthMFAEnrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\n        body: {\n          friendly_name: params.friendlyName,\n          factor_type: params.factorType,\n          issuer: params.issuer,\n        },\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n\n      if (error) {\n        return { data: null, error }\n      }\n\n      if (data?.totp?.qr_code) {\n        data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Validates a device as part of the enrollment step.\n   * @param factorId System assigned identifier for authenticator device as returned by enroll\n   * @param code Code Generated by an authenticator device\n   */\n  private async _verify(params: MFAVerifyParams): Promise<AuthMFAVerifyResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/verify`,\n        {\n          body: { code: params.code, challenge_id: params.challengeId },\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n      if (error) {\n        return { data: null, error }\n      }\n\n      await this._saveSession({\n        expires_at: Math.round(Date.now() / 1000) + data.expires_in,\n        ...data,\n      })\n      this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data)\n\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Creates a challenge which a user can verify against\n   * @param factorId System assigned identifier for authenticator device as returned by enroll\n   */\n  private async _challenge(params: MFAChallengeParams): Promise<AuthMFAChallengeResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/challenge`,\n        {\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Creates a challenge and immediately verifies it\n   * @param factorId System assigned identifier for authenticator device as returned by enroll\n   * @param code Code Generated by an authenticator device\n   */\n  private async _challengeAndVerify(\n    params: MFAChallengeAndVerifyParams\n  ): Promise<AuthMFAVerifyResponse> {\n    const { data: challengeData, error: challengeError } = await this._challenge({\n      factorId: params.factorId,\n    })\n    if (challengeError) {\n      return { data: null, error: challengeError }\n    }\n    return await this._verify({\n      factorId: params.factorId,\n      challengeId: challengeData.id,\n      code: params.code,\n    })\n  }\n\n  /**\n   * Displays all devices for a given user\n   */\n  private async _listFactors(): Promise<AuthMFAListFactorsResponse> {\n    const {\n      data: { user },\n      error: userError,\n    } = await this.getUser()\n    if (userError) {\n      return { data: null, error: userError }\n    }\n\n    const factors = user?.factors || []\n    const totp = factors.filter(\n      (factor) => factor.factor_type === 'totp' && factor.status === 'verified'\n    )\n\n    return {\n      data: {\n        all: factors,\n        totp,\n      },\n      error: null,\n    }\n  }\n\n  /**\n   * Gets the current and next authenticator assurance level (AAL)\n   * and the current authentication methods for the session (AMR)\n   */\n  private async _getAuthenticatorAssuranceLevel(): Promise<AuthMFAGetAuthenticatorAssuranceLevelResponse> {\n    const {\n      data: { session },\n      error: sessionError,\n    } = await this.getSession()\n    if (sessionError) {\n      return { data: null, error: sessionError }\n    }\n    if (!session) {\n      return {\n        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n        error: null,\n      }\n    }\n\n    const payload = this._decodeJWT(session.access_token)\n\n    let currentLevel: AuthenticatorAssuranceLevels | null = null\n\n    if (payload.aal) {\n      currentLevel = payload.aal\n    }\n\n    let nextLevel: AuthenticatorAssuranceLevels | null = currentLevel\n\n    const verifiedFactors =\n      session.user.factors?.filter((factor: Factor) => factor.status === 'verified') ?? []\n\n    if (verifiedFactors.length > 0) {\n      nextLevel = 'aal2'\n    }\n\n    const currentAuthenticationMethods = payload.amr || []\n\n    return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}