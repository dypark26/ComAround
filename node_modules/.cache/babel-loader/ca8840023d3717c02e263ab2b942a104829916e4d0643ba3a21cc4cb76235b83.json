{"ast":null,"code":"var _jsxFileName = \"/Users/hongdakyung/Desktop/myWorkSpace/comAround/src/components/CardSlide.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n// 이미지를 불러온다.\nimport img from \"../img/imgs1.jpg\";\nimport img2 from \"../img/imgs2.jpg\";\nimport img3 from \"../img/imgs3.jpg\";\n// 이미지를 배열에 넣어준다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardSlide = () => {\n  _s();\n  const [pickers, setPickers] = useState([]);\n  const [pickIndex, setPickIndex] = useState(0);\n  //custominterval 은 3000(3초)으로 초기화\n  const [custominterval] = useState(3000);\n  // 이미지를 불러온다.\n  const onPickIndex = useCallback(idx => {\n    if (pickIndex === idx) {\n      // 선택되어 있는 인덱스를 클릭시에는 아무것도 실행하지 않는다.\n      return;\n    }\n    setPickIndex(idx);\n  }, [pickIndex]);\n  useEffect(() => {\n    if (pickIndex === images.length - 1) {\n      // 마지막 이미지를 보여주고 있을 때\n\n      setTimeout(() => {\n        setPickIndex(0);\n      }, custominterval);\n    } else {\n      setTimeout(() => {\n        setPickIndex(pickIndex + 1);\n        // 3초마다 pickIndex를 1씩 증가시켜준다.\n      }, custominterval);\n    }\n    // 이미지의 갯수만큼 pickers JSX.Element[] 배열 state에 생성하여 넣어준다.\n    setPickers(images.map((_, idx) => {\n      return /*#__PURE__*/_jsxDEV(Picker, {\n        onClick: () => onPickIndex(idx),\n        background: pickIndex === idx ? \"orange\" : \"white\"\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this);\n    }));\n  }, [onPickIndex, pickIndex]);\n  console.log(images[1]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(FillImage, {\n      src: images[pickIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PickerWrapper, {\n      children: pickers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CardSlide, \"WTSSnMlSMnd+XpXN0f9Vq2xKbIk=\");\n_c = CardSlide;\nexport default CardSlide;\nconst images = [img, img2, img3];\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  transition: transform 0.5s;\n`;\n_c2 = Container;\nconst FillImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n_c3 = FillImage;\nconst PickerWrapper = styled.div`\n  position: absolute;\n  left: 50%;\n  bottom: 30px;\n  transform: translate(-50%, -10px);\n  display: flex;\n`;\n_c4 = PickerWrapper;\nconst Picker = styled.div`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${props => props.background};\n  margin: 0 6px;\n  cursor: pointer;\n`;\n_c5 = Picker;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"CardSlide\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"FillImage\");\n$RefreshReg$(_c4, \"PickerWrapper\");\n$RefreshReg$(_c5, \"Picker\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","styled","img","img2","img3","CardSlide","pickers","setPickers","pickIndex","setPickIndex","custominterval","onPickIndex","idx","images","length","setTimeout","map","_","console","log","Container","div","FillImage","PickerWrapper","Picker","props","background"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround/src/components/CardSlide.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n// 이미지를 불러온다.\nimport img from \"../img/imgs1.jpg\";\nimport img2 from \"../img/imgs2.jpg\";\nimport img3 from \"../img/imgs3.jpg\";\n// 이미지를 배열에 넣어준다.\nconst CardSlide = (): JSX.Element => {\n  const [pickers, setPickers] = useState<JSX.Element[]>([]);\n  const [pickIndex, setPickIndex] = useState<number>(0);\n  //custominterval 은 3000(3초)으로 초기화\n  const [custominterval] = useState(3000);\n  // 이미지를 불러온다.\n  const onPickIndex = useCallback(\n    (idx: number): void => {\n      if (pickIndex === idx) {\n        // 선택되어 있는 인덱스를 클릭시에는 아무것도 실행하지 않는다.\n        return;\n      }\n\n      setPickIndex(idx);\n    },\n    [pickIndex]\n  );\n\n  useEffect(() => {\n    if (pickIndex === images.length - 1) {\n      // 마지막 이미지를 보여주고 있을 때\n\n      setTimeout(() => {\n        setPickIndex(0);\n      }, custominterval);\n    } else {\n      setTimeout(() => {\n        setPickIndex(pickIndex + 1);\n        // 3초마다 pickIndex를 1씩 증가시켜준다.\n      }, custominterval);\n    }\n    // 이미지의 갯수만큼 pickers JSX.Element[] 배열 state에 생성하여 넣어준다.\n    setPickers(\n      images.map((_: string, idx: number) => {\n        return (\n          <Picker\n            onClick={() => onPickIndex(idx)}\n            key={idx}\n            background={pickIndex === idx ? \"orange\" : \"white\"}\n          ></Picker>\n        );\n      })\n    );\n  }, [onPickIndex, pickIndex]);\n  console.log(images[1]);\n  return (\n    <Container>\n      <FillImage src={images[pickIndex]} />\n\n      <PickerWrapper>\n        {pickers}\n        {/* 위에서 선언해준 pickers JSX.Element[]들을 렌더링\n    map을 해주지 않아도 렌더링이 됨 (JSX.Element[]의 특성) */}\n      </PickerWrapper>\n    </Container>\n  );\n};\n\nexport default CardSlide;\n\nconst images: string[] = [img, img2, img3];\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  transition: transform 0.5s;\n`;\n\nconst FillImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nconst PickerWrapper = styled.div`\n  position: absolute;\n  left: 50%;\n  bottom: 30px;\n  transform: translate(-50%, -10px);\n  display: flex;\n`;\n\nconst Picker = styled.div<{ background: string }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${(props) => props.background};\n  margin: 0 6px;\n  cursor: pointer;\n`;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC/D,OAAOC,MAAM,MAAM,mBAAmB;AACtC;AACA,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,IAAI,MAAM,kBAAkB;AACnC;AAAA;AACA,MAAMC,SAAS,GAAG,MAAmB;EAAA;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAgB,EAAE,CAAC;EACzD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAS,CAAC,CAAC;EACrD;EACA,MAAM,CAACU,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACvC;EACA,MAAMW,WAAW,GAAGb,WAAW,CAC5Bc,GAAW,IAAW;IACrB,IAAIJ,SAAS,KAAKI,GAAG,EAAE;MACrB;MACA;IACF;IAEAH,YAAY,CAACG,GAAG,CAAC;EACnB,CAAC,EACD,CAACJ,SAAS,CAAC,CACZ;EAEDT,SAAS,CAAC,MAAM;IACd,IAAIS,SAAS,KAAKK,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MACnC;;MAEAC,UAAU,CAAC,MAAM;QACfN,YAAY,CAAC,CAAC,CAAC;MACjB,CAAC,EAAEC,cAAc,CAAC;IACpB,CAAC,MAAM;MACLK,UAAU,CAAC,MAAM;QACfN,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;QAC3B;MACF,CAAC,EAAEE,cAAc,CAAC;IACpB;IACA;IACAH,UAAU,CACRM,MAAM,CAACG,GAAG,CAAC,CAACC,CAAS,EAAEL,GAAW,KAAK;MACrC,oBACE,QAAC,MAAM;QACL,OAAO,EAAE,MAAMD,WAAW,CAACC,GAAG,CAAE;QAEhC,UAAU,EAAEJ,SAAS,KAAKI,GAAG,GAAG,QAAQ,GAAG;MAAQ,GAD9CA,GAAG;QAAA;QAAA;QAAA;MAAA,QAEA;IAEd,CAAC,CAAC,CACH;EACH,CAAC,EAAE,CAACD,WAAW,EAAEH,SAAS,CAAC,CAAC;EAC5BU,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC,CAAC,CAAC,CAAC;EACtB,oBACE,QAAC,SAAS;IAAA,wBACR,QAAC,SAAS;MAAC,GAAG,EAAEA,MAAM,CAACL,SAAS;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eAErC,QAAC,aAAa;MAAA,UACXF;IAAO;MAAA;MAAA;MAAA;IAAA,QAGM;EAAA;IAAA;IAAA;IAAA;EAAA,QACN;AAEhB,CAAC;AAAC,GAxDID,SAAS;AAAA,KAATA,SAAS;AA0Df,eAAeA,SAAS;AAExB,MAAMQ,MAAgB,GAAG,CAACX,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;AAE1C,MAAMgB,SAAS,GAAGnB,MAAM,CAACoB,GAAI;AAC7B;AACA;AACA;AACA,CAAC;AAAC,MAJID,SAAS;AAMf,MAAME,SAAS,GAAGrB,MAAM,CAACC,GAAI;AAC7B;AACA;AACA;AACA,CAAC;AAAC,MAJIoB,SAAS;AAMf,MAAMC,aAAa,GAAGtB,MAAM,CAACoB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC,MANIE,aAAa;AAQnB,MAAMC,MAAM,GAAGvB,MAAM,CAACoB,GAA4B;AAClD;AACA;AACA;AACA,sBAAuBI,KAAK,IAAKA,KAAK,CAACC,UAAW;AAClD;AACA;AACA,CAAC;AAAC,MAPIF,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}