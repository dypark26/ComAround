{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => {};\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    var _a;\n    this.accessToken = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = w3cwebsocket;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.eventsPerSecondLimitMs = 100;\n    this.inThrottle = false;\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const eventsPerSecond = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.eventsPerSecond;\n    if (eventsPerSecond) this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond);\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n      this.disconnect();\n      this.connect();\n    }), this.reconnectAfterMs);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect() {\n    if (this.conn) {\n      return;\n    }\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers);\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n  /**\n   * Returns all created channels\n   */\n  getChannels() {\n    return this.channels;\n  }\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  removeChannel(channel) {\n    return channel.unsubscribe().then(status => {\n      if (this.channels.length === 0) {\n        this.disconnect();\n      }\n      return status;\n    });\n  }\n  /**\n   * Unsubscribes and removes all channels\n   */\n  removeAllChannels() {\n    return Promise.all(this.channels.map(channel => channel.unsubscribe())).then(values => {\n      this.disconnect();\n      return values;\n    });\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  channel(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    if (!this.isConnected()) {\n      this.connect();\n    }\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n    let callback = () => {\n      this.encode(data, result => {\n        var _a;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n    if (this.isConnected()) {\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n        const isThrottled = this._throttle(callback)();\n        if (isThrottled) {\n          return 'rate limited';\n        }\n      } else {\n        callback();\n      }\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef() {\n    let newRef = this.ref + 1;\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n    return this.ref.toString();\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c._joinRef() !== channel._joinRef());\n  }\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  _endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /** @internal */\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n  _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`);\n    this._flushSendBuffer();\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n    this._triggerChanError();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n  _onConnError(error) {\n    this.log('transport', error.message);\n    this._triggerChanError();\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  /** @internal */\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /** @internal */\n  _sendHeartbeat() {\n    var _a;\n    if (!this.isConnected()) {\n      return;\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n  /** @internal */\n  _throttle(callback) {\n    let eventsPerSecondLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.eventsPerSecondLimitMs;\n    return () => {\n      if (this.inThrottle) return true;\n      callback();\n      this.inThrottle = true;\n      setTimeout(() => {\n        this.inThrottle = false;\n      }, eventsPerSecondLimit);\n      return false;\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["w3cwebsocket","VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","RealtimeClient","constructor","endPoint","options","undefined","open","close","error","message","websocket","params","headers","timeout","logger","transport","heartbeatIntervalMs","eventsPerSecond","eventsPerSecondLimitMs","Math","floor","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","serializer","bind","reconnectTimer","__awaiter","disconnect","connect","conn","_endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","event","_onConnMessage","onclose","_onConnClose","code","reason","heartbeatTimer","clearInterval","reset","getChannels","channels","removeChannel","channel","unsubscribe","then","status","length","removeAllChannels","Promise","all","map","values","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","ref","result","send","includes","isThrottled","_throttle","sendBuffer","setAuth","token","accessToken","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","_makeRef","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","_appendParams","Object","assign","vsn","rawMessage","pendingHeartbeatRef","type","_isMember","_trigger","stateChangeCallbacks","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","eventsPerSecondLimit","inThrottle","setTimeout"],"sources":["/Users/hongdakyung/Desktop/myWorkSpace/comAround-supabase-customHook/node_modules/@supabase/realtime-js/src/RealtimeClient.ts"],"sourcesContent":["import { w3cwebsocket } from 'websocket'\nimport {\n  VSN,\n  CHANNEL_EVENTS,\n  TRANSPORTS,\n  SOCKET_STATES,\n  DEFAULT_TIMEOUT,\n  WS_CLOSE_NORMAL,\n  DEFAULT_HEADERS,\n  CONNECTION_STATE,\n} from './lib/constants'\nimport Timer from './lib/timer'\nimport Serializer from './lib/serializer'\nimport RealtimeChannel, { RealtimeChannelOptions } from './RealtimeChannel'\n\nexport type RealtimeClientOptions = {\n  transport?: WebSocket\n  timeout?: number\n  heartbeatIntervalMs?: number\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: any }\n}\n\nexport type RealtimeMessage = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\n\nconst noop = () => {}\n\nexport default class RealtimeClient {\n  accessToken: string | null = null\n  channels: RealtimeChannel[] = []\n  endPoint: string = ''\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: any = w3cwebsocket\n  heartbeatIntervalMs: number = 30000\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  ref: number = 0\n  reconnectTimer: Timer\n  logger: Function = noop\n  encode: Function\n  decode: Function\n  reconnectAfterMs: Function\n  conn: WebSocket | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n  eventsPerSecondLimitMs: number = 100\n  inThrottle: boolean = false\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n\n    if (options?.params) this.params = options.params\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\n    if (options?.timeout) this.timeout = options.timeout\n    if (options?.logger) this.logger = options.logger\n    if (options?.transport) this.transport = options.transport\n    if (options?.heartbeatIntervalMs)\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\n\n    const eventsPerSecond = options?.params?.eventsPerSecond\n    if (eventsPerSecond)\n      this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond)\n\n    this.reconnectAfterMs = options?.reconnectAfterMs\n      ? options.reconnectAfterMs\n      : (tries: number) => {\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\n        }\n    this.encode = options?.encode\n      ? options.encode\n      : (payload: JSON, callback: Function) => {\n          return callback(JSON.stringify(payload))\n        }\n    this.decode = options?.decode\n      ? options.decode\n      : this.serializer.decode.bind(this.serializer)\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect()\n      this.connect()\n    }, this.reconnectAfterMs)\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    if (this.conn) {\n      return\n    }\n\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers)\n\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer'\n      this.conn.onopen = () => this._onConnOpen()\n      this.conn.onerror = (error) => this._onConnError(error as ErrorEvent)\n      this.conn.onmessage = (event) => this._onConnMessage(event)\n      this.conn.onclose = (event) => this._onConnClose(event)\n    }\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {} // noop\n      if (code) {\n        this.conn.close(code, reason ?? '')\n      } else {\n        this.conn.close()\n      }\n      this.conn = null\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n      this.reconnectTimer.reset()\n    }\n  }\n\n  /**\n   * Returns all created channels\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.channels\n  }\n\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  removeChannel(\n    channel: RealtimeChannel\n  ): Promise<RealtimeRemoveChannelResponse> {\n    return channel.unsubscribe().then((status) => {\n      if (this.channels.length === 0) {\n        this.disconnect()\n      }\n      return status\n    })\n  }\n\n  /**\n   * Unsubscribes and removes all channels\n   */\n  removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\n    return Promise.all(\n      this.channels.map((channel) => channel.unsubscribe())\n    ).then((values) => {\n      this.disconnect()\n      return values\n    })\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  channel(\n    topic: string,\n    params: RealtimeChannelOptions = { config: {} }\n  ): RealtimeChannel {\n    if (!this.isConnected()) {\n      this.connect()\n    }\n\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\n    this.channels.push(chan)\n    return chan\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: RealtimeMessage): 'rate limited' | void {\n    const { topic, event, payload, ref } = data\n    let callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n        const isThrottled = this._throttle(callback)()\n        if (isThrottled) {\n          return 'rate limited'\n        }\n      } else {\n        callback()\n      }\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token: string | null): void {\n    this.accessToken = token\n\n    this.channels.forEach((channel) => {\n      token && channel.updateJoinPayload({ access_token: token })\n\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\n      }\n    })\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel: RealtimeChannel) {\n    this.channels = this.channels.filter(\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\n    )\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  private _endPointURL(): string {\n    return this._appendParams(\n      this.endPoint,\n      Object.assign({}, this.params, { vsn: VSN })\n    )\n  }\n\n  /** @internal */\n  private _onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\n      let { topic, event, payload, ref } = msg\n\n      if (\n        (ref && ref === this.pendingHeartbeatRef) ||\n        event === payload?.type\n      ) {\n        this.pendingHeartbeatRef = null\n      }\n\n      this.log(\n        'receive',\n        `${payload.status || ''} ${topic} ${event} ${\n          (ref && '(' + ref + ')') || ''\n        }`,\n        payload\n      )\n      this.channels\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\n        .forEach((channel: RealtimeChannel) =>\n          channel._trigger(event, payload, ref)\n        )\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\n    })\n  }\n\n  /** @internal */\n  private _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`)\n    this._flushSendBuffer()\n    this.reconnectTimer.reset()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(\n      () => this._sendHeartbeat(),\n      this.heartbeatIntervalMs\n    )\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\n  }\n\n  /** @internal */\n  private _onConnClose(event: any) {\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.reconnectTimer.scheduleTimeout()\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\n  }\n\n  /** @internal */\n  private _onConnError(error: ErrorEvent) {\n    this.log('transport', error.message)\n    this._triggerChanError()\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\n  }\n\n  /** @internal */\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeChannel) =>\n      channel._trigger(CHANNEL_EVENTS.error)\n    )\n  }\n\n  /** @internal */\n  private _appendParams(\n    url: string,\n    params: { [key: string]: string }\n  ): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n\n    return `${url}${prefix}${query}`\n  }\n\n  /** @internal */\n  private _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n  /** @internal */\n  private _sendHeartbeat() {\n    if (!this.isConnected()) {\n      return\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log(\n        'transport',\n        'heartbeat timeout. Attempting to re-establish connection'\n      )\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\n      return\n    }\n    this.pendingHeartbeatRef = this._makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    this.setAuth(this.accessToken)\n  }\n\n  /** @internal */\n  private _throttle(\n    callback: Function,\n    eventsPerSecondLimit: number = this.eventsPerSecondLimitMs\n  ): () => boolean {\n    return () => {\n      if (this.inThrottle) return true\n      callback()\n      this.inThrottle = true\n      setTimeout(() => {\n        this.inThrottle = false\n      }, eventsPerSecondLimit)\n      return false\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}